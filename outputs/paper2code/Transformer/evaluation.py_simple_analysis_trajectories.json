[{"role": "system", "content": "You are an expert researcher, strategic analyzer and software engineer with a deep understanding of experimental design and reproducibility in scientific research.\nYou will receive a research paper in JSON format, an overview of the plan, a design in JSON format consisting of \"Implementation approach\", \"File list\", \"Data structures and interfaces\", and \"Program call flow\", followed by a task in JSON format that includes \"Required packages\", \"Required other language third-party packages\", \"Logic Analysis\", and \"Task list\", along with a configuration file named \"config.yaml\". \n\nYour task is to conduct a comprehensive logic analysis to accurately reproduce the experiments and methodologies described in the research paper. \nThis analysis must align precisely with the paper\u2019s methodology, experimental setup, and evaluation criteria.\n\n1. Align with the Paper: Your analysis must strictly follow the methods, datasets, model configurations, hyperparameters, and experimental setups described in the paper.\n2. Be Clear and Structured: Present your analysis in a logical, well-organized, and actionable format that is easy to follow and implement.\n3. Prioritize Efficiency: Optimize the analysis for clarity and practical implementation while ensuring fidelity to the original experiments.\n4. Follow design: YOU MUST FOLLOW \"Data structures and interfaces\". DONT CHANGE ANY DESIGN. Do not use public member functions that do not exist in your design.\n5. REFER TO CONFIGURATION: Always reference settings from the config.yaml file. Do not invent or assume any values\u2014only use configurations explicitly provided.\n     \n"}, {"role": "user", "content": "## Paper\n{'paper_id': 'Transformer', 'title': 'Provided proper attribution is provided, Google hereby grants permission to reproduce the tables and figures in this paper solely for use in journalistic or scholarly works. Attention Is All You Need', 'abstract': 'The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. * Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research.\\n\u2020 Work performed while at Google Brain.\\n\u2021 Work performed while at Google Research.', 'pdf_parse': {'paper_id': 'Transformer', 'abstract': [{'text': 'The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. * Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research.', 'section': 'Abstract', 'sec_num': None}, {'text': '\u2020 Work performed while at Google Brain.', 'section': 'Abstract', 'sec_num': None}, {'text': '\u2021 Work performed while at Google Research.', 'section': 'Abstract', 'sec_num': None}], 'body_text': [{'text': 'Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [35, 2, 5] . Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [38, 24, 15] .', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states h t , as a function of the previous hidden state h t-1 and the input for position t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks [21] and conditional computation [32] , while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2, 19] . In all but a few cases [27] , however, such attention mechanisms are used in conjunction with a recurrent network.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [16] , ByteNet [18] and ConvS2S [9] , all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [12] . In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2.', 'section': 'Background', 'sec_num': '2'}, {'text': 'Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 27, 28, 22] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'End-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [34] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [17, 18] and [9] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35] . Here, the encoder maps an input sequence of symbol representations (x 1 , ..., x n ) to a sequence of continuous representations z = (z 1 , ..., z n ). Given z, the decoder then generates an output sequence (y 1 , ..., y m ) of symbols one element at a time. At each step the model is auto-regressive [10] , consuming the previously generated symbols as additional input when generating the next. The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1 , respectively.', 'section': 'Model Architecture', 'sec_num': '3'}, {'text': 'Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of the two sub-layers, followed by layer normalization [1] . That is, the output of each sub-layer is LayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension d model = 512.', 'section': 'Encoder and Decoder Stacks', 'sec_num': '3.1'}, {'text': 'Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position i can depend only on the known outputs at positions less than i.', 'section': 'Encoder and Decoder Stacks', 'sec_num': '3.1'}, {'text': 'An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum Scaled Dot-Product Attention Multi-Head Attention of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.', 'section': 'Attention', 'sec_num': '3.2'}, {'text': 'We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2 ). The input consists of queries and keys of dimension d k , and values of dimension d v . We compute the dot products of the query with all keys, divide each by \u221a d k , and apply a softmax function to obtain the weights on the values.', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V . We compute the matrix of outputs as:', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'EQUATION', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'The two most commonly used attention functions are additive attention [2] , and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of 1', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '\u221a d k', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'While for small values of d k the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d k [3] . We suspect that for large values of d k , the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients4 . To counteract this effect, we scale the dot products by 1', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '\u221a d k .', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k , d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure 2 .', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'MultiHead(Q, K, V ) = Concat(head 1 , ..., head h )W O', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'where', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'head i = Attention(QW Q i , KW K i , V W V i )', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Where the projections are parameter matrices', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'W Q i \u2208 R dmodel\u00d7d k , W K i \u2208 R dmodel\u00d7d k , W V i \u2208 R dmodel\u00d7dv and W O \u2208 R hdv\u00d7dmodel .', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'In this work we employ h = 8 parallel attention layers, or heads. For each of these we use', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'd k = d v = d model /h = 64.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'The Transformer uses multi-head attention in three different ways:', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [38, 2, 9] .', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to -\u221e) all values in the input of the softmax which correspond to illegal connections. See Figure 2 .', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': 'In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'EQUATION', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'The dimensionality of input and output is d model = 512, and the inner-layer has dimensionality d f f = 2048.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model . We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [30] . In the embedding layers, we multiply those weights by \u221a d model . ', 'section': 'Embeddings and Softmax', 'sec_num': '3.4'}, {'text': '(n 2 \u2022 d) O(1) O(1) Recurrent O(n \u2022 d 2 ) O(n) O(n) Convolutional O(k \u2022 n \u2022 d 2 ) O(1) O(log k (n)) Self-Attention (restricted) O(r \u2022 n \u2022 d) O(1) O(n/r)', 'section': 'Embeddings and Softmax', 'sec_num': '3.4'}, {'text': 'Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed [9] .', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'In this work, we use sine and cosine functions of different frequencies:', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'P E (pos,2i) = sin(pos/10000 2i/dmodel ) P E (pos,2i+1) = cos(pos/10000 2i/dmodel )', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'where pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u2022 2\u03c0. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, P E pos+k can be represented as a linear function of P E pos .', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'We also experimented with using learned positional embeddings [9] instead, and found that the two versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1 , ..., x n ) to another sequence of equal length (z 1 , ..., z n ), with x i , z i \u2208 R d , such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [12] . Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'As noted in Table 1 , a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n is smaller than the representation dimensionality d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [38] and byte-pair [31] representations. To improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of size r in the input sequence centered around the respective output position. This would increase the maximum path length to O(n/r). We plan to investigate this approach further in future work.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'A single convolutional layer with kernel width k < n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(log k (n)) in the case of dilated convolutions [18] , increasing the length of the longest paths between any two positions in the network. Convolutional layers are generally more expensive than recurrent layers, by a factor of k. Separable convolutions [6] , however, decrease the complexity considerably, to O(k', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': '\u2022 n \u2022 d + n \u2022 d 2 ).', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'Even with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'As side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'This section describes the training regime for our models.', 'section': 'Training', 'sec_num': '5'}, {'text': 'We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding [3] , which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary [38] . Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.', 'section': 'Training Data and Batching', 'sec_num': '5.1'}, {'text': 'We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table 3 ), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days).', 'section': 'Hardware and Schedule', 'sec_num': '5.2'}, {'text': 'We used the Adam optimizer [20] with \u03b2 1 = 0.9, \u03b2 2 = 0.98 and \u03f5 = 10 -9 . We varied the learning rate over the course of training, according to the formula:', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'EQUATION', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'This corresponds to increasing the learning rate linearly for the first warmup_steps training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used warmup_steps = 4000.', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'We employ three types of regularization during training: Residual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.', 'section': 'Regularization', 'sec_num': '5.4'}, {'text': 'During training, we employed label smoothing of value \u03f5 ls = 0.1 [36] . This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.', 'section': 'Label Smoothing', 'sec_num': None}, {'text': '6 Results', 'section': 'Label Smoothing', 'sec_num': None}, {'text': 'On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2 ) outperforms the best previously reported models (including ensembles) by more than 2.0 BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is listed in the bottom line of Table 3 . Training took 3.5 days on 8 P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models.', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0, outperforming all of the previously published single models, at less than 1/4 the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout rate P drop = 0.1, instead of 0.3.', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of 4 and length penalty \u03b1 = 0.6 [38] . These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length + 50, but terminate early when possible [38] .', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'Table 2 summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU5 .', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the . We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table 3 .', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section 3.2.2. While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'In Table 3 rows (B), we observe that reducing the attention key size d k hurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9] , and observe nearly identical results to the base model.', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37] .', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'We trained a 4-layer transformer with d model = 1024 on the Wall Street Journal (WSJ) portion of the Penn Treebank [25] , about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences [37] . We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'We performed only a small number of experiments to select the dropout, both attention and residual (section 5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3 for both WSJ only and the semi-supervised setting.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'Our results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar [8] .', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'In contrast to RNN sequence-to-sequence models [37] , the Transformer outperforms the Berkeley-Parser [29] even when training only on the WSJ training set of 40K sentences.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'We are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video. Making generation less sequential is another research goals of ours.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'The code we used to train and evaluate our models is available at https://github.com/ tensorflow/tensor2tensor. ', 'section': 'Conclusion', 'sec_num': '7'}, {'text': \"The Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.\", 'section': 'Input-Input Layer5', 'sec_num': None}, {'text': 'The ', 'section': 'Input-Input Layer5', 'sec_num': None}, {'text': 'To illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1. Then their dot product, q \u2022 k = d k i=1 qiki, has mean 0 and variance d k .', 'section': '', 'sec_num': None}, {'text': 'We used values of 2.8, 3.7,', 'section': '', 'sec_num': None}, {'text': '6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.', 'section': '', 'sec_num': None}], 'back_matter': [{'text': 'Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments, corrections and inspiration.', 'section': 'acknowledgement', 'sec_num': None}], 'ref_entries': {'FIGREF0': {'text': 'Figure 1: The Transformer -model architecture.', 'num': None, 'type_str': 'figure', 'fig_num': '1', 'uris': None}, 'FIGREF1': {'text': 'Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.', 'num': None, 'type_str': 'figure', 'fig_num': '2', 'uris': None}, 'FIGREF2': {'text': \"Figure 3: An example of the attention mechanism following long-distance dependencies in the encoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of the verb 'making', completing the phrase 'making...more difficult'. Attentions here shown only for the word 'making'. Different colors represent different heads. Best viewed in color.\", 'num': None, 'type_str': 'figure', 'fig_num': '3', 'uris': None}, 'FIGREF3': {'text': \"Figure4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top: Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.\", 'num': None, 'type_str': 'figure', 'fig_num': '4', 'uris': None}, 'FIGREF4': {'text': 'Figure5: Many of the attention heads exhibit behaviour that seems related to the structure of the sentence. We give two such examples above, from two different heads from the encoder self-attention at layer 5 of 6. The heads clearly learned to perform different tasks.', 'num': None, 'type_str': 'figure', 'fig_num': '5', 'uris': None}, 'TABREF0': {'text': 'Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Layer Type</td><td>Complexity per Layer Sequential Maximum Path Length</td></tr><tr><td/><td>Operations</td></tr><tr><td>Self-Attention</td><td>O</td></tr></table>'}, 'TABREF1': {'text': 'The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Model</td><td colspan=\"2\">BLEU EN-DE EN-FR</td><td>Training Cost (FLOPs) EN-DE EN-FR</td></tr><tr><td>ByteNet [18]</td><td>23.75</td><td/><td/></tr><tr><td>Deep-Att + PosUnk [39]</td><td/><td>39.2</td><td>1.0 \u2022 10 20</td></tr><tr><td>GNMT + RL [38]</td><td>24.6</td><td>39.92</td><td>2.3 \u2022 10 19 1.4 \u2022 10 20</td></tr><tr><td>ConvS2S [9]</td><td>25.16</td><td>40.46</td><td>9.6 \u2022 10 18 1.5 \u2022 10 20</td></tr><tr><td>MoE [32]</td><td>26.03</td><td>40.56</td><td>2.0 \u2022 10 19 1.2 \u2022 10 20</td></tr><tr><td>Deep-Att + PosUnk Ensemble [39]</td><td/><td>40.4</td><td>8.0 \u2022 10 20</td></tr><tr><td>GNMT + RL Ensemble [38]</td><td>26.30</td><td>41.16</td><td>1.8 \u2022 10 20 1.1 \u2022 10 21</td></tr><tr><td>ConvS2S Ensemble [9]</td><td>26.36</td><td>41.29</td><td>7.7 \u2022 10 19 1.2 \u2022 10 21</td></tr><tr><td>Transformer (base model)</td><td>27.3</td><td>38.1</td><td>3.3 \u2022 10 18</td></tr><tr><td>Transformer (big)</td><td>28.4</td><td>41.8</td><td>2.3 \u2022 10 19</td></tr></table>'}, 'TABREF2': {'text': 'Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td/><td colspan=\"2\">N d model</td><td>d ff</td><td>h</td><td>d k</td><td>d v</td><td colspan=\"2\">P drop \u03f5 ls</td><td>train steps (dev) (dev) PPL BLEU params \u00d710 6</td></tr><tr><td colspan=\"2\">base 6</td><td>512</td><td colspan=\"2\">2048 8</td><td>64</td><td>64</td><td>0.1</td><td colspan=\"2\">0.1 100K 4.92</td><td>25.8</td><td>65</td></tr><tr><td/><td/><td/><td/><td colspan=\"3\">1 512 512</td><td/><td/><td>5.29</td><td>24.9</td></tr><tr><td>(A)</td><td/><td/><td/><td colspan=\"3\">4 128 128 16 32 32</td><td/><td/><td>5.00 4.91</td><td>25.5 25.8</td></tr><tr><td/><td/><td/><td/><td colspan=\"2\">32 16</td><td>16</td><td/><td/><td>5.01</td><td>25.4</td></tr><tr><td>(B)</td><td/><td/><td/><td/><td>16 32</td><td/><td/><td/><td>5.16 5.01</td><td>25.1 25.4</td><td>58 60</td></tr><tr><td/><td>2</td><td/><td/><td/><td/><td/><td/><td/><td>6.11</td><td>23.7</td><td>36</td></tr><tr><td/><td>4</td><td/><td/><td/><td/><td/><td/><td/><td>5.19</td><td>25.3</td><td>50</td></tr><tr><td/><td>8</td><td/><td/><td/><td/><td/><td/><td/><td>4.88</td><td>25.5</td><td>80</td></tr><tr><td>(C)</td><td/><td>256</td><td/><td/><td>32</td><td>32</td><td/><td/><td>5.75</td><td>24.5</td><td>28</td></tr><tr><td/><td/><td>1024</td><td/><td/><td colspan=\"2\">128 128</td><td/><td/><td>4.66</td><td>26.0</td><td>168</td></tr><tr><td/><td/><td/><td>1024</td><td/><td/><td/><td/><td/><td>5.12</td><td>25.4</td><td>53</td></tr><tr><td/><td/><td/><td>4096</td><td/><td/><td/><td/><td/><td>4.75</td><td>26.2</td><td>90</td></tr><tr><td/><td/><td/><td/><td/><td/><td/><td>0.0</td><td/><td>5.77</td><td>24.6</td></tr><tr><td>(D)</td><td/><td/><td/><td/><td/><td/><td>0.2</td><td>0.0</td><td>4.95 4.67</td><td>25.5 25.3</td></tr><tr><td/><td/><td/><td/><td/><td/><td/><td/><td>0.2</td><td>5.47</td><td>25.7</td></tr><tr><td>(E)</td><td/><td colspan=\"7\">positional embedding instead of sinusoids</td><td>4.92</td><td>25.7</td></tr><tr><td>big</td><td>6</td><td colspan=\"3\">1024 4096 16</td><td/><td/><td>0.3</td><td/><td>300K 4.33</td><td>26.4</td><td>213</td></tr><tr><td colspan=\"4\">development set, newstest2013</td><td/><td/><td/><td/><td/></tr></table>'}, 'TABREF3': {'text': 'The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Parser</td><td>Training</td><td>WSJ 23 F1</td></tr><tr><td colspan=\"2\">Vinyals &amp; Kaiser el al. (2014) [37] WSJ only, discriminative</td><td>88.3</td></tr><tr><td>Petrov et al. (2006) [29]</td><td>WSJ only, discriminative</td><td>90.4</td></tr><tr><td>Zhu et al. (2013) [40]</td><td>WSJ only, discriminative</td><td>90.4</td></tr><tr><td>Dyer et al. (2016) [8]</td><td>WSJ only, discriminative</td><td>91.7</td></tr><tr><td>Transformer (4 layers)</td><td>WSJ only, discriminative</td><td>91.3</td></tr><tr><td>Zhu et al. (2013) [40]</td><td>semi-supervised</td><td>91.3</td></tr><tr><td>Huang &amp; Harper (2009) [14]</td><td>semi-supervised</td><td>91.3</td></tr><tr><td>McClosky et al. (2006) [26]</td><td>semi-supervised</td><td>92.1</td></tr><tr><td>Vinyals &amp; Kaiser el al. (2014) [37]</td><td>semi-supervised</td><td>92.1</td></tr><tr><td>Transformer (4 layers)</td><td>semi-supervised</td><td>92.7</td></tr><tr><td>Luong et al. (2015) [23]</td><td>multi-task</td><td>93.0</td></tr><tr><td>Dyer et al. (2016) [8]</td><td>generative</td><td>93.3</td></tr></table>'}}}}\n\n-----\n\n## Overview of the plan\nBelow is a detailed roadmap that \u2013 if followed systematically \u2013 will help you re\u2010implement the Transformer as described in the \u201cAttention Is All You Need\u201d paper and reproduce its key experiments. This plan is organized into major components: understanding the model methodology, data preparation, training setup, evaluation/inference, and implementation considerations. Note that while most details are clearly described in the paper, a few choices (such as tokenization implementation or checkpoint scheduling details) will require you to choose sensible defaults or follow practices common in recent literature.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. OVERVIEW & OBJECTIVES\n\n\u2022 Goal: Reproduce the Transformer model for sequence transduction.  \n\u2003\u2003\u2013 Implement both the base and \u201cbig\u201d variants for machine translation experiments (WMT 2014 English\u2013German and English\u2013French) and a 4-layer variant for English constituency parsing.  \n\u2003\u2003\u2013 Mimic the architecture, training procedures, hyperparameters, and evaluation protocols detailed in the paper.\n\n\u2022 Experimental targets:  \n\u2003\u2003\u2013 For translation, achieve BLEU scores roughly similar to 27\u201328 (base) and around 28.4 BLEU (big) on En\u2013De and ~41.8 BLEU on En\u2013Fr.  \n\u2003\u2003\u2013 For parsing, obtain competitive F1 scores on WSJ (e.g., ~91\u201393 F1), matching the reported results.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. MODEL METHODOLOGY & ARCHITECTURE IMPLEMENTATION\n\nA. Input Representations & Embeddings  \n\u2003\u2003\u2022 Map both the source and target tokens into continuous vectors of dimension d_model.  \n\u2003\u2003\u2022 Share the same weight matrix between input embeddings and the pre-softmax linear transformation.  \n\u2003\u2003\u2022 Multiply the embedding weights by \u221a(d_model) to scale them before adding positional encodings.\n\nB. Positional Encoding  \n\u2003\u2003\u2022 Use sinusoidal positional encodings that are added to the input embeddings.  \n\u2003\u2003\u2022 For position pos and dimension index i, compute:\n\u2003\u2003\u2003\u2003\u2013 PE(pos, 2i) = sin(pos / 10000^(2i/d_model))\n\u2003\u2003\u2003\u2003\u2013 PE(pos, 2i+1) = cos(pos / 10000^(2i/d_model))\n\u2003\u2003\u2022 (Note: The paper also experimented with learned positional embeddings but recommends sinusoids for extrapolation.)\n\nC. Encoder Stack (6 Layers for Translation Models)  \n\u2003\u2003\u2022 Each encoder layer has two sub-layers:  \n\u2003\u2003\u2003\u20031. Multi-head self-attention mechanism.  \n\u2003\u2003\u2003\u20032. Point-wise feed-forward network.\n\u2003\u2003\u2022 Each sub-layer uses a residual connection followed by layer normalization.\n\u2003\u2003\u2022 All outputs (sub-layers and embedding layers) use dimension d_model (typically 512 for the base model).\n\nD. Decoder Stack (6 Layers for Translation Models)  \n\u2003\u2003\u2022 In addition to the two sub-layers from the encoder, add a third sub-layer that performs multi-head attention over the encoder\u2019s outputs.  \n\u2003\u2003\u2022 The decoder\u2019s self-attention sub-layer is modified with masking so that positions can only attend to earlier positions (to preserve auto-regressive generation).  \n\u2003\u2003\u2022 Use residual connections and layer normalization after each sub-layer.\n\nE. Multi-Head Attention Details  \n\u2003\u2003\u2022 Instead of a single attention operation, project the inputs (queries Q, keys K, and values V) into h = 8 different subspaces.  \n\u2003\u2003\u2022 For each head, set:  \n\u2003\u2003\u2003\u2003\u2013 d_k = d_v = d_model/h (e.g., 64 when d_model = 512).\n\u2003\u2003\u2022 Compute scaled dot-product attention:\n\u2003\u2003\u2003\u2003\u2013 For each head: Attention(Q, K, V) = softmax((Q\u00b7K\u1d40) / \u221a(d_k)) \u00b7 V.\n\u2003\u2003\u2022 Concatenate the h head outputs and apply a final linear projection to return to dimension d_model.\n\nF. Feed-Forward Network  \n\u2003\u2003\u2022 Each layer includes a position-wise (applied identically at every position) fully connected network with two linear transformations and a ReLU in between.  \n\u2003\u2003\u2022 For the base model: use inner-layer dimension d_ff = 2048, input/output dimension = d_model (512).\n\nG. Regularization  \n\u2003\u2003\u2022 Apply dropout at multiple points:  \n\u2003\u2003\u2003\u2003\u2013 On the output of every sub-layer (before adding the residual and applying LayerNorm).  \n\u2003\u2003\u2003\u2003\u2013 On the summed inputs (embeddings + positional encodings).  \n\u2003\u2003\u2022 For the base model, use dropout probability p_drop = 0.1; note that for the big model (e.g., English\u2013French experiments) slight rate changes (e.g., 0.1 instead of 0.3) are specified.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. DATA PREPARATION & EXPERIMENTAL SETTING\n\nA. Machine Translation Experiments  \n\u2003\u20031. WMT 2014 English\u2013German  \n\u2003\u2003\u2003\u2003\u2013 Dataset: ~4.5 million sentence pairs.  \n\u2003\u2003\u2003\u2003\u2013 Tokenization: Use byte-pair encoding (BPE) with a shared vocabulary of approximately 37,000 tokens.\n\u2003\u20032. WMT 2014 English\u2013French  \n\u2003\u2003\u2003\u2003\u2013 Dataset: ~36 million sentence pairs.  \n\u2003\u2003\u2003\u2003\u2013 Tokenization: Use word-piece segmentation with a vocabulary size of 32,000 tokens.\n\n\u2003\u2003\u2022 Batching Strategy:  \n\u2003\u2003\u2003\u2003\u2013 Group sentence pairs by approximate sequence length.\n\u2003\u2003\u2003\u2003\u2013 Each training batch should contain roughly 25,000 source tokens and 25,000 target tokens.\n\nB. Constituency Parsing Experiments  \n\u2003\u2003\u2022 Dataset: The Wall Street Journal (WSJ) portion of the Penn Treebank (~40K sentences) for supervised experiments.  \n\u2003\u2003\u2022 For semi-supervised experiments, also incorporate a large corpus (e.g., the high-confidence/BerkeleyParser corpus with ~17M sentences).  \n\u2003\u2003\u2022 Vocabulary:  \n\u2003\u2003\u2003\u2003\u2013 Use a 16K vocabulary for WSJ-only training and a 32K vocabulary for the semi-supervised setup.\n\u2003\u2003\u2022 Model Variant:  \n\u2003\u2003\u2003\u2003\u2013 Implement a 4-layer Transformer with d_model = 1024 (scaling up dimensions as per the paper).\n\u2003\u2003\u2022 Inference modifications:  \n\u2003\u2003\u2003\u2003\u2013 Maximum output length: set to (input length + 300).  \n\u2003\u2003\u2003\u2003\u2013 Beam search with a beam size of 21 and a length penalty of \u03b1 = 0.3.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n4. TRAINING SETUP & HYPERPARAMETERS\n\nA. Optimizer and Learning Rate Schedule  \n\u2003\u2003\u2022 Use the Adam optimizer with parameters:  \n\u2003\u2003\u2003\u2003\u2013 \u03b21 = 0.9, \u03b22 = 0.98, and \u03f5 = 1e-9.\n\u2003\u2003\u2022 Learning Rate Schedule:  \n\u2003\u2003\u2003\u2003\u2013 Vary the learning rate according to:\n\u2003\u2003\u2003\u2003\u2003lr = d_model^(-0.5) * min(step_num^(-0.5), step_num * warmup_steps^(-1.5))\n\u2003\u2003\u2003\u2003\u2013 Set warmup_steps = 4000.\n\u2003\u2003\u2022 This schedule starts with a linear increase (warmup phase) and then decays proportionally to the inverse square root of the step number.\n\nB. Regularization Techniques  \n\u2003\u2003\u2022 Residual Dropout: Apply dropout as described on each sub-layer output prior to residual addition.  \n\u2003\u2003\u2022 Label Smoothing: Use a smoothing factor \u03f5_ls = 0.1 to soften the target distribution, which helps improve BLEU at the expense of perplexity.\n\nC. Training Duration and Batch Setup  \n\u2003\u20031. Hardware: Training should be done on a machine with 8 NVIDIA P100 GPUs.  \n\u2003\u20032. Base Model Training:  \n\u2003\u2003\u2003\u2003\u2013 Train for 100,000 steps (~12 hours of training).  \n\u2003\u2003\u2003\u2003\u2013 Checkpoint frequency: Save checkpoints (for example, every 10 minutes) and average the last 5 checkpoints for inference.  \n\u2003\u20033. Big Model Training:  \n\u2003\u2003\u2003\u2003\u2013 Train for 300,000 steps (~3.5 days).  \n\u2003\u2003\u2003\u2003\u2013 Average the last 20 checkpoints for final model performance.\n\nD. Batching and Data Handling  \n\u2003\u2003\u2022 Make sure the batching is \u201cdynamic\u201d (group sentences by similar lengths) so that each batch contains approximately 25,000 tokens on each side.  \n\u2003\u2003\u2022 This is important for stable training speed and GPU utilization.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n5. INFERENCE AND EVALUATION PROTOCOLS\n\nA. Translation Inference  \n\u2003\u2003\u2022 Use beam search decoding with:  \n\u2003\u2003\u2003\u2003\u2013 Beam size = 4  \n\u2003\u2003\u2003\u2003\u2013 Length penalty \u03b1 = 0.6  \n\u2003\u2003\u2003\u2003\u2013 Maximum output length set to (input length + 50), but include early termination logic to exit when the end-of-sentence token is reached.\n\u2003\u2003\u2022 Evaluate using BLEU score:  \n\u2003\u2003\u2003\u2003\u2013 For WMT 2014 En\u2013De, expect results near 28.4 BLEU (big model).  \n\u2003\u2003\u2003\u2003\u2013 For WMT 2014 En\u2013Fr, aim for around 41.8 BLEU.\n\nB. Constituency Parsing Inference  \n\u2003\u2003\u2022 Use beam search with:  \n\u2003\u2003\u2003\u2003\u2013 Beam size = 21  \n\u2003\u2003\u2003\u2003\u2013 Length penalty \u03b1 = 0.3  \n\u2003\u2003\u2003\u2003\u2013 Maximum output length = input length + 300  \n\u2003\u2003\u2022 Evaluate the parser using the F1 score on the corresponding test sections of the WSJ.\n\nC. Additional Metrics  \n\u2003\u2003\u2022 Monitor training perplexity (note that label smoothing will inflate perplexity but is beneficial for final BLEU and F1 scores).  \n\u2003\u2003\u2022 Optionally log additional statistics such as attention distributions for interpretability.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n6. IMPLEMENTATION ROADMAP\n\nA. Code Structure & Modules  \n\u2003\u20031. Data Preprocessing Module  \n\u2003\u2003\u2003\u2003\u2013 Scripts to download, tokenize, and batch datasets (for both translation and parsing).  \n\u2003\u2003\u2003\u2003\u2013 Implement BPE/word-piece tokenization as per the datasets\u2019 requirements.\n\u2003\u20032. Model Definition Module  \n\u2003\u2003\u2003\u2003\u2013 Implement the Transformer block(s), including encoder, decoder, multi-head attention, and feed-forward layers.  \n\u2003\u2003\u2003\u2003\u2013 Code the positional encoding function (sinusoidal) and make provisions for optional learned positional embeddings.  \n\u2003\u2003\u2003\u2003\u2013 Incorporate residual connections and layer normalization.  \n\u2003\u20033. Training Loop  \n\u2003\u2003\u2003\u2003\u2013 Set up the training loop using the chosen framework (e.g., TensorFlow or PyTorch).  \n\u2003\u2003\u2003\u2003\u2013 Integrate the Adam optimizer with your custom learning rate schedule.  \n\u2003\u2003\u2003\u2003\u2013 Include dropout, label smoothing, and checkpoint saving.  \n\u2003\u20034. Inference and Evaluation Scripts  \n\u2003\u2003\u2003\u2003\u2013 Implement beam search decoding per the specified parameters.  \n\u2003\u2003\u2003\u2003\u2013 Calculate BLEU scores (using standard libraries) for machine translation.  \n\u2003\u2003\u2003\u2003\u2013 Evaluate parsing performance using F1 (may require external evaluation scripts for WSJ).\n\nB. Development Strategy  \n\u2003\u2003\u2022 Start by building a \u201ctoy\u201d version on a small dataset to verify that all components (attention, residuals, positional encoding, decoding) are working as expected.  \n\u2003\u2003\u2022 Gradually scale to full datasets and multi-GPU training.  \n\u2003\u2003\u2022 Implement logging for training curves (learning rate, loss, BLEU/F1 on dev sets) to help with debugging and hyperparameter tuning.  \n\u2003\u2003\u2022 Experiment with checkpoint averaging strategies as described.\n\nC. Experiment Variations  \n\u2003\u2003\u2022 Once the baseline is established, consider replicating some ablations (e.g., single-head attention, changing d_k dimensions, or replacing sinusoidal encodings with learned embeddings) as explored in Table 3 of the paper.  \n\u2003\u2003\u2022 Document and compare these variations with the baseline to verify reproducibility.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n7. OPEN QUESTIONS & CLARIFICATIONS\n\n\u2022 Tokenization Details:  \n\u2003\u2003\u2013 The paper mentions BPE and word-piece segmentation. Choose an open-source implementation and verify vocabulary sizes (37K for En\u2013De and 32K for En\u2013Fr).\n\n\u2022 Checkpoint Averaging:  \n\u2003\u2003\u2013 The exact interval for checkpoint saving and the method for averaging (simple weight averaging) is not fully specified; follow practices from recent literature or Tensor2Tensor guidelines.\n\n\u2022 Hardware & Parallelization:  \n\u2003\u2003\u2013 Confirm that your multi-GPU training framework can efficiently broadcast model updates (if using data parallelism), matching the reported step times.\n\n\u2022 Constituency Parsing Details:  \n\u2003\u2003\u2013 Some aspects (data cleaning, bracket representation) might be less detailed in the paper. You may need to review additional parsing papers for best practices in formatting the parsing task for seq2seq training.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n8. CONCLUSION\n\nThis comprehensive plan covers the Transformer\u2019s detailed model architecture, data handling, training procedures, hyperparameters, and evaluation strategies as described in the paper. Although certain implementation details (such as exact tokenization or checkpoint averaging protocols) are not fully explicit, following common practices in the literature along with the guidelines above should put you on strong footing for reproducing the results. Once you\u2019ve confirmed that each module performs as expected on smaller examples, you can scale the training to full datasets and multi-GPU setups.\n\nBy following this roadmap, you\u2019ll be well prepared to start writing the final code with a strong understanding of the experiments and methodologies to reproduce the results of \u201cAttention Is All You Need.\u201d\n\n-----\n\n## Design\n[CONTENT]\n{\n    \"Implementation approach\": \"We will build a modular system in Python using PyTorch as the primary deep learning framework. Core modules will handle data loading and preprocessing (with support for BPE/word-piece tokenization using torchtext or sentencepiece), model construction (a Transformer encoder-decoder architecture with multi-head attention, sinusoidal positional encoding, and point-wise feed-forward networks), training (using the Adam optimizer with a custom learning rate scheduler as described in the paper, along with dropout regularization and label smoothing), and evaluation (beam search decoding with BLEU scoring for translation and F1 scoring for parsing). Open-source libraries such as PyTorch, torchtext, and sacreBLEU will be used to ensure the system remains simple, extensible, and reproducible.\",\n    \"File list\": [\n        \"app.py\",\n        \"dataset_loader.py\",\n        \"model.py\",\n        \"trainer.py\",\n        \"evaluation.py\",\n        \"utils.py\"\n    ],\n    \"Data structures and interfaces\": \"classDiagram\\n    class App {\\n        +__init__(config: dict)\\n        +run_experiment() -> None\\n    }\\n\\n    class DatasetLoader {\\n        +__init__(config: dict)\\n        +load_data() -> dict\\n    }\\n\\n    class TransformerModel {\\n        +__init__(params: dict)\\n        +forward(src: Tensor, tgt: Tensor, src_mask: Tensor, tgt_mask: Tensor) -> Tensor\\n    }\\n\\n    class Trainer {\\n        +__init__(model: TransformerModel, data: dict, config: dict)\\n        +train() -> None\\n        +validate() -> dict\\n    }\\n\\n    class Evaluation {\\n        +__init__(model: TransformerModel, data: dict, config: dict)\\n        +evaluate() -> dict\\n    }\\n\\n    %% Relationships\\n    App --> DatasetLoader\\n    App --> Trainer\\n    App --> Evaluation\\n    Trainer --> TransformerModel\\n\",\n    \"Program call flow\": \"sequenceDiagram\\n    participant A as App\\n    participant DL as DatasetLoader\\n    participant TM as TransformerModel\\n    participant TR as Trainer\\n    participant EV as Evaluation\\n\\n    A->>DL: __init__(config)\\n    A->>DL: load_data()\\n    DL-->>A: {train_data, val_data, test_data}\\n\\n    A->>TM: __init__(model_params)\\n    A->>TR: __init__(TM, {train_data, val_data}, config)\\n    TR->>TM: forward(src, tgt, src_mask, tgt_mask)\\n    TR-->>A: training complete\\n\\n    A->>EV: __init__(TM, {test_data}, config)\\n    EV->>TM: forward(src_test, tgt_test, src_mask, tgt_mask)\\n    TM-->>EV: predictions\\n    EV-->>A: evaluation metrics (BLEU/F1)\\n\",\n    \"Anything UNCLEAR\": \"The precise tokenization approach (BPE vs. word-piece and associated libraries), the method for checkpoint averaging during training, and any additional hyperparameter details for beam search (e.g., early stopping conditions) need further clarification to fully replicate the experiments.\"\n}\n[/CONTENT]\n\n-----\n\n## Task\n[CONTENT]\n{\n    \"Required packages\": [\n        \"numpy==1.21.0\",\n        \"torch==1.9.0\",\n        \"torchtext==0.10.0\",\n        \"sacrebleu==2.0.0\",\n        \"tqdm==4.62.0\",\n        \"sentencepiece==0.1.96\"\n    ],\n    \"Required Other language third-party packages\": [\n        \"No third-party dependencies required\"\n    ],\n    \"Logic Analysis\": [\n        [\n            \"dataset_loader.py\",\n            \"Defines the DatasetLoader class which is responsible for loading and preprocessing datasets for both machine translation and constituency parsing. This module will implement tokenization (using SentencePiece or similar for BPE/word-piece), vocabulary creation, batching (grouping sequences of similar lengths), and returns data loaders for training, validation, and testing.\"\n        ],\n        [\n            \"model.py\",\n            \"Contains the TransformerModel class which implements the Transformer architecture from the paper. It includes submodules for:\\n  - Encoder and Decoder stacks (with 6 layers for translation and configurable layers for parsing).\\n  - MultiHeadAttention module (implements scaled dot-product attention over multiple heads).\\n  - Position-wise Feed-Forward Networks.\\n  - Positional Encoding module (sine and cosine-based encoding).\\nMethods include __init__ for setup and forward for propagation. It will rely on PyTorch's nn.Module and torch functions.\"\n        ],\n        [\n            \"trainer.py\",\n            \"Implements the Trainer class responsible for the training loop. This module will:\\n  - Initialize the optimizer (Adam with parameters \u03b21=0.9, \u03b22=0.98, \u03f5=1e-9) and learning rate scheduler as per the paper's formula (with warmup_steps=4000).\\n  - Handle dropout and label smoothing during training.\\n  - Manage checkpoint saving and averaging at specified intervals.\\n  - Log training progress, step times, and validation metrics.\"\n        ],\n        [\n            \"evaluation.py\",\n            \"Defines the Evaluation class which carries out model evaluation using beam search decoding. It includes functions for:\\n  - Applying beam search with customizable beam size, length penalty and maximum output length.\\n  - Calculating BLEU scores (via sacreBLEU) for translation tasks and F1 scores for parsing tasks.\\n  - Reporting final metrics in a structured format.\"\n        ],\n        [\n            \"utils.py\",\n            \"Contains common utility functions such as the learning rate scheduler, configuration parsers, checkpoint average utility, and logging helpers. These functions enable code reuse across the trainer and evaluation modules.\"\n        ],\n        [\n            \"main.py\",\n            \"Acts as the entry point for the application. It will parse configuration parameters, initialize the DatasetLoader to load data, instantiate the TransformerModel, create Trainer and Evaluation objects, and orchestrate the entire experiment workflow (training followed by evaluation).\"\n        ]\n    ],\n    \"Task list\": [\n        \"dataset_loader.py\",\n        \"model.py\",\n        \"utils.py\",\n        \"trainer.py\",\n        \"evaluation.py\",\n        \"main.py\"\n    ],\n    \"Full API spec\": \"\",\n    \"Shared Knowledge\": \"Shared utilities and configuration parameters (such as hyperparameters, paths to dataset files, tokenization settings, and training schedule details) will be defined in a central configuration file and shared across modules (e.g., through utils.py). Both trainer.py and evaluation.py will share the learning rate scheduler and checkpoint management logic. Data processing in dataset_loader.py must be consistent with the model input requirements in model.py.\",\n    \"Anything UNCLEAR\": \"Clarification is needed regarding the exact tokenization method (BPE vs. word-piece) and library preferences, the hardware configuration specifics for multi-GPU training and checkpoint averaging protocols, as well as any additional hyperparameter tuning details not fully specified in the paper.\"\n}\n[/CONTENT]\n\n-----\n\n## Configuration file\n```yaml\n## config.yaml\ntraining:\n  optimizer: \"Adam\"\n  beta1: 0.9\n  beta2: 0.98\n  epsilon: 1e-9\n  warmup_steps: 4000\n  learning_rate_schedule: \"d_model^-0.5 * min(step_num^-0.5, step_num * warmup_steps^-1.5)\"\n  base_train_steps: 100000  # Approximately 12 hours on 8 P100 GPUs\n  big_train_steps: 300000   # Approximately 3.5 days on 8 P100 GPUs\n\nhyperparameters:\n  base_model:\n    num_layers: 6\n    d_model: 512\n    d_ff: 2048\n    num_heads: 8\n    dropout: 0.1\n    label_smoothing: 0.1\n  big_model:\n    num_layers: 6\n    d_model: 1024\n    d_ff: 4096\n    num_heads: 16\n    dropout: 0.1\n\ndataset:\n  translation:\n    en_de:\n      description: \"WMT 2014 English-German dataset (~4.5M sentence pairs)\"\n      tokenization: \"Byte-Pair Encoding with a shared vocabulary of ~37000 tokens\"\n    en_fr:\n      description: \"WMT 2014 English-French dataset (~36M sentence pairs)\"\n      tokenization: \"Word-piece segmentation with a vocabulary of ~32000 tokens\"\n    batch_size_tokens: 25000  # Approximate number of tokens per side in each batch\n  parsing:\n    wsj:\n      description: \"WSJ portion of the Penn Treebank (~40K sentences)\"\n      vocabulary_size: 16000\n    semi_supervised:\n      description: \"High-confidence/BerkeleyParser corpus (~17M sentences)\"\n      vocabulary_size: 32000\n\ninference:\n  translation:\n    beam_search:\n      beam_size: 4\n      length_penalty: 0.6\n      max_output_length: \"input_length + 50\"\n  parsing:\n    beam_search:\n      beam_size: 21\n      length_penalty: 0.3\n      max_output_length: \"input_length + 300\"\n```\n-----\n\n## Instruction\nConduct a Logic Analysis to assist in writing the code, based on the paper, the plan, the design, the task and the previously specified configuration file (config.yaml). \nYou DON'T need to provide the actual code yet; focus on a thorough, clear analysis.\n\nWrite the logic analysis in 'evaluation.py', which is intended for 'Defines the Evaluation class which carries out model evaluation using beam search decoding. It includes functions for:\n  - Applying beam search with customizable beam size, length penalty and maximum output length.\n  - Calculating BLEU scores (via sacreBLEU) for translation tasks and F1 scores for parsing tasks.\n  - Reporting final metrics in a structured format.'.\n\n-----\n\n## Logic Analysis: evaluation.py"}, {"role": "assistant", "content": "Below is a detailed logic analysis for evaluation.py. This module\u2019s purpose is to assess the trained Transformer model using beam search decoding and then reporting final metrics (BLEU for translation or F1 for parsing) in a structured format. The analysis strictly follows the paper\u2019s evaluation protocols, the design\u2019s module interfaces, and the configuration parameters provided in config.yaml.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \nOverview of Evaluation.py\n\n\u2022 The Evaluation class will be instantiated with:\n\u2003\u2003\u2013 The trained TransformerModel (from model.py)\n\u2003\u2003\u2013 A data dictionary containing the evaluation (test) dataset (for translation or parsing)\n\u2003\u2003\u2013 A configuration dictionary (from config.yaml) that includes inference parameters (beam size, length penalty, and max output length settings specific to each task)\n\n\u2022 The public interface consists of the __init__() and evaluate() methods. All other helper functions (e.g., for beam search) will be internal (private) to the class.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n1. __init__ Method\n\n\u2022 Inputs:\n\u2003\u2003\u2013 model: the TransformerModel instance\n\u2003\u2003\u2013 data: a dict that contains test data (could be structured with keys such as \u201ctranslation\u201d and \u201cparsing\u201d according to the experiment)\n\u2003\u2003\u2013 config: the overall configuration dictionary\n\n\u2022 In __init__, the Evaluation class will:\n\u2003\u2003\u2013 Store the model, data, and configuration.\n\u2003\u2003\u2013 (Optionally) Determine which task is being evaluated by inspecting data and/or config (e.g., if config contains inference.translation settings, then the task is translation; else if using inference.parsing, then it is parsing).  \n\u2003\u2003\u2013 Extract relevant inference parameters from config:\n\u2003\u2003\u2003\u2003\u25cb For translation: beam_size (4), length_penalty (0.6) and max_output_length is computed as \u201cinput_length + 50.\u201d\n\u2003\u2003\u2003\u2003\u25cb For parsing: beam_size (21), length_penalty (0.3) and max_output_length computed as \u201cinput_length + 300.\u201d\n\u2003\u2003\u2013 Possibly set the model into evaluation mode (i.e. model.eval()) if not already set.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n2. evaluate() Method\n\nThe evaluate() method is the main entry point, and it will perform the following steps:\n\nA. Model Setup\n\u2003\u2003\u2013 Call model.eval() to disable dropout and other training-specific behavior.\n\u2003\u2003\u2013 Initialize empty lists to collect predictions and corresponding reference (gold) outputs.\n\nB. Iterating Over the Test Dataset\n\u2003\u2003\u2013 For each batch in the test data:\n\u2003\u2003\u2003\u2003\u25cb For each source sample (and its corresponding reference), compute a source mask as required by the model.\n\u2003\u2003\u2003\u2003\u25cb Determine the maximum allowed output length:\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 For translation: max_length = (length of source sequence) + 50 (as specified in config.inference.translation.max_output_length)\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 For parsing: max_length = (length of input) + 300 (as specified in config.inference.parsing.max_output_length)\n\u2003\u2003\u2003\u2003\u25cb Using the _beam_search() helper (described below), generate a candidate prediction for the input. The beam search will use:\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 beam_size and length_penalty drawn from config (depending on the task)\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 Early termination if the model predicts the end-of-sequence token (EOS) before reaching max_length.\n\u2003\u2003\u2003\u2003\u25cb Convert the predicted token indices into text using the same vocabulary/tokenizer that was used during data preprocessing.\n\u2003\u2003\u2003\u2003\u25cb Append the decoded prediction and the reference text (already tokenized or converted to text) to their respective lists.\n\nC. Metric Computation\n\u2003\u2003\u2013 After processing all test batches, the evaluation method decides which metric to compute.\n\u2003\u2003\u2003\u2003\u25cb For Translation Tasks:\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 Invoke sacreBLEU (e.g., sacrebleu.corpus_bleu(predictions, [references])) to compute the BLEU score.\n\u2003\u2003\u2003\u2003\u25cb For Constituency Parsing Tasks:\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 Use an F1 computation routine. (Since F1 scoring for parsing may require additional tree comparison logic, the evaluation module can either call an external utility or wrap a function that computes F1 by comparing predicted constituency trees with the gold trees.)\n\u2003\u2003\u2013 Construct a results dictionary containing the key metric(s). For example:\n\u2003\u2003\u2003\u2003{ \"task\": \"translation\", \"BLEU\": computed_bleu }\n\u2003\u2003\u2003\u2003or\u2003{ \"task\": \"parsing\", \"F1\": computed_f1 }\n\nD. Reporting Results\n\u2003\u2003\u2013 Optionally, print/log the metrics to console.\n\u2003\u2003\u2013 Return the results dictionary.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n3. Beam Search Decoding (Internal Helper Function: _beam_search)\n\nThe Evaluation class will include an internal helper method (e.g., _beam_search) that implements the following logic:\n\nA. Initialization\n\u2003\u2003\u2013 For a given source input (a Tensor), first compute the corresponding source mask.\n\u2003\u2003\u2013 Run the encoder portion of the model to obtain encoded source features.\n\u2003\u2003\u2013 Initialize the beam with the start-of-sequence (BOS) token for each candidate (usually a list with one element containing the BOS token index and an initial score of 0).\n\nB. Iterative Decoding Loop\n\u2003\u2003\u2013 For each time step up to the maximum output length:\n\u2003\u2003\u2003\u2003\u25cb For each candidate in the beam:\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 Construct the partial target sequence.\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 Compute the target mask (which also applies causal masking for auto-regressive decoding).\n\u2003\u2003\u2003\u2003\u2003\u2003\u2013 Call model.forward(src, tgt, src_mask, tgt_mask) to compute the probability distribution over the vocabulary for the next token.\n\u2003\u2003\u2003\u2003\u25cb Extend each beam candidate with every possible next token and update the cumulative log-probability scores.\n\u2003\u2003\u2003\u2003\u25cb Apply the length penalty (using the configured value: 0.6 for translation or 0.3 for parsing) when scoring and selecting new beam candidates.\n\u2003\u2003\u2003\u2003\u25cb Prune the candidate list so that only the top \u201cbeam_size\u201d candidates remain.\n\u2003\u2003\u2003\u2003\u25cb If any candidate predicts the end-of-sequence token and meets any early termination criteria, mark that beam candidate as complete.\n\u2003\u2003\u2013 The loop terminates when all beam candidates have reached EOS or the maximum output length is reached.\n\nC. Return the Best Candidate\n\u2003\u2003\u2013 From the completed candidates, select the one with the best (highest) overall score.\n\u2003\u2003\u2013 Return the predicted token sequence (which will be decoded later into a human-readable string).\n\nNote: Although the beam search algorithm described above is iterative and can be computationally intensive, it follows the paper\u2019s inference protocol and ensures that the model\u2019s auto-regressive property is maintained through proper masking.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n4. Handling Different Tasks (Translation vs. Parsing)\n\n\u2022 The evaluation module must check the configuration to know whether it is processing a translation or parsing experiment:\n\u2003\u2003\u2013 For translation:\n\u2003\u2003\u2003\u2003\u25cb Use parameters from config.inference.translation.\n\u2003\u2003\u2003\u2003\u25cb Report the BLEU metric.\n\u2003\u2003\u2013 For parsing:\n\u2003\u2003\u2003\u25cb Use parameters from config.inference.parsing.\n\u2003\u2003\u2003\u2003\u2003\u25aa Beam search uses a larger beam size (21) and a higher max output length (input_length + 300).\n\u2003\u2003\u2003\u25cb Compute F1 metric over constituency structures.\n\u2022 This decision can be made earlier in evaluate() based on keys in config or the structure of the provided data.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n5. Integration with Shared Utilities\n\n\u2022 The Evaluation module should reuse utilities defined in utils.py (for example, the learning rate scheduler is not directly needed here, but checkpoint averaging utilities are common to both Trainer and Evaluation if predictions from multiple checkpoints are to be averaged).\n\u2022 Vocab/tokenizer utilities (to translate token IDs into strings) must be consistent with those in dataset_loader.py.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n6. Reproducibility and Configuration References\n\n\u2022 All hyperparameters (beam_size, length_penalty, and the constants for maximum output length) must be read from the config.yaml. No hard-coded values should be used aside from what\u2019s defined in config.\n\u2022 Ensure that the inference procedure (including early stopping on EOS) strictly follows the experimental design previously described.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \nSummary\n\nThe evaluation.py module will:  \n1. Initialize using the provided model, evaluation dataset, and configuration (ensuring model.eval() is set).  \n2. For each test example, use an internal beam search (_beam_search) that:\n\u2003\u2003\u2013 Applies the Transformer\u2019s forward function iteratively with proper source and target masking.\n\u2003\u2003\u2013 Uses the beam_search parameters from config (different for translation and parsing).\n\u2003\u2003\u2013 Stops generation early when EOS is reached or max_output_length is met.\n3. Decode predicted token sequences to text,\n4. Use sacreBLEU (for translation) or a dedicated F1 evaluation function (for parsing) to compute the final metric,\n5. Return (and optionally log) a structured dictionary of evaluation metrics.\n\nThis analysis lays out all the logical components and flow for implementing evaluation.py in a way that aligns with the paper\u2019s methodologies and our system design."}]