{"paper_name": "Transformer", "target_repo_dir": "../outputs/Transformer_repo", "eval_type": "ref_free", "gold_repo_dir": "", "generated_n": 1, "request_json": {"model": "o3-mini", "messages": [{"role": "system", "content": "You will be given a research paper along with its corresponding code repository.\n\nYour task is to rate the code repository on one metric and provide a critique highlighting key differences.\n\nPlease make sure you read and understand these instructions carefully. Keep this document open while reviewing, and refer to it as needed.\n\n---\n\nEvaluation Criteria:\n\nCorrectness (1-5): The quality of the repository in accurately implementing the paper\u2019s concepts, methodology, and algorithms without logical errors. Additionally, provide a critique focusing on the completeness, accuracy, and implementation choices made in the repository relative to the methodology and algorithms described in the paper.\n\n1: Very Poor. The repository does not correctly implement the core concepts, methodology, or algorithms from the paper. Major logical errors or missing components are present.\n2: Poor. The repository attempts to implement the paper\u2019s concepts but contains significant mistakes or missing components, making the implementation incorrect.\n3: Fair. Some core components and concepts are correctly implemented, but there are notable logical errors or inaccuracies in the methodology.\n4: Good. The repository correctly implements the key components and methodology, with only minor inaccuracies that do not significantly affect correctness.\n5: Excellent. The repository fully and accurately implements all key components, methodology, and algorithms from the paper without logical errors.\n\n---\n\nEvaluation Steps  \n\n1. Identify Key Aspects of the Paper: Carefully read the paper to understand its core concepts, methodology, and algorithms. Pay close attention to key aspects crucial for implementing the paper\u2019s results (e.g., specific algorithms, data preprocessing steps, evaluation protocols).\n\n2. Examine the Code Repository: Analyze the repository to determine how well it implements the key aspects of the paper. Focus on whether the repository\u2019s core logic, algorithms, and structure align with the methodology and experiments described in the paper.\n\n3. Identify Logical Errors and Deviations: Check for logical errors, missing steps, or deviations from the paper\u2019s methodology. Note any incorrect representations, inconsistencies, or incomplete implementations that could affect the correctness of the repository.\n\n4. Provide a Critique: Consider the completeness and accuracy of the implementation relative to the paper\u2019s goals. You do not need to analyze minor details like logging functions, script organization, or documentation quality. Instead, concentrate on the correctness of the logic and implementation to ensure the core concepts from the paper are fully reflected in the repository. For each identified issue, write a detailed critique specifying the affected files and functions in the repository. Highlight missing or incorrectly implemented steps that impact the correctness and alignment with the paper\u2019s methodology.\n\n5. Assess Completeness and Accuracy: Evaluate the repository for its completeness and accuracy relative to the paper\u2019s methodology. Ensure that all critical components\u2014such as data preprocessing, core algorithms, and evaluation steps\u2014are implemented and consistent with the paper\u2019s descriptions.\n\n6. Assign a Score: Based on your evaluation, provide a critique and assign a correctness score from 1 to 5 for the repository, reflecting how well it implements the key aspects of the paper. Include a detailed critique in the specified JSON format.\n\n\n---\n\nSeverity Level:  \n\nEach identified critique will be assigned a severity level based on its impact on the correctness of the methodology implementation.  \n\n- High: Missing or incorrect implementation of the paper\u2019s core concepts, major loss functions, or experiment components that are fundamental to reproducing the paper\u2019s methodology.  \n  - Example: The main algorithm is missing or fundamentally incorrect.  \n- Medium: Issues affecting training logic, data preprocessing, or other core functionalities that significantly impact performance but do not completely break the system.  \n  - Example: Improper training loop structure, incorrect data augmentation, or missing essential components in data processing.  \n- Low: Errors in specific features that cause deviations from expected results but can be worked around with modifications. Any errors in the evaluation process belong to this category unless they impact the core concepts. These include minor issues like logging, error handling mechanisms, configuration settings, evaluation steps that do not alter the fundamental implementation and additional implementations not explicitly stated in the paper.\n  - Example: Suboptimal hyperparameter initialization, incorrect learning rate schedule, inaccuracies in evaluation metrics, using a different random seed, variations in batch processing, different weight initialization, issues in result logging or reporting, variations in evaluation dataset splits, improper error handling in non-critical steps, mismatches in secondary evaluation criteria, or additional implementation details not specified in the paper that do not interfere with core results.\n\n---\n\nExample JSON format:  \n```json\n{\n    \"critique_list\": [\n        {\n            \"file_name\": \"dataset.py\",\n            \"func_name\": \"train_preprocess\",\n            \"severity_level\": \"medium\",\n            \"critique\": \"A critique of the target repository's file.\"\n        },\n        {\n            \"file_name\": \"metrics.py\",\n            \"func_name\": \"f1_at_k\",\n            \"severity_level\": \"low\",\n            \"critique\": \"A critique of the target repository's file.\"\n        }\n    ],\n    \"score\": 2\n}\n```\n\n---\n\nSample:\n\nResearch Paper:\n\n{'paper_id': 'Transformer', 'title': 'Provided proper attribution is provided, Google hereby grants permission to reproduce the tables and figures in this paper solely for use in journalistic or scholarly works. Attention Is All You Need', 'abstract': 'The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. * Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research.\\n\u2020 Work performed while at Google Brain.\\n\u2021 Work performed while at Google Research.', 'pdf_parse': {'paper_id': 'Transformer', 'abstract': [{'text': 'The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. * Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research.', 'section': 'Abstract', 'sec_num': None}, {'text': '\u2020 Work performed while at Google Brain.', 'section': 'Abstract', 'sec_num': None}, {'text': '\u2021 Work performed while at Google Research.', 'section': 'Abstract', 'sec_num': None}], 'body_text': [{'text': 'Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [35, 2, 5] . Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [38, 24, 15] .', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states h t , as a function of the previous hidden state h t-1 and the input for position t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks [21] and conditional computation [32] , while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2, 19] . In all but a few cases [27] , however, such attention mechanisms are used in conjunction with a recurrent network.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [16] , ByteNet [18] and ConvS2S [9] , all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [12] . In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2.', 'section': 'Background', 'sec_num': '2'}, {'text': 'Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 27, 28, 22] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'End-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [34] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [17, 18] and [9] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35] . Here, the encoder maps an input sequence of symbol representations (x 1 , ..., x n ) to a sequence of continuous representations z = (z 1 , ..., z n ). Given z, the decoder then generates an output sequence (y 1 , ..., y m ) of symbols one element at a time. At each step the model is auto-regressive [10] , consuming the previously generated symbols as additional input when generating the next. The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1 , respectively.', 'section': 'Model Architecture', 'sec_num': '3'}, {'text': 'Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of the two sub-layers, followed by layer normalization [1] . That is, the output of each sub-layer is LayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension d model = 512.', 'section': 'Encoder and Decoder Stacks', 'sec_num': '3.1'}, {'text': 'Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position i can depend only on the known outputs at positions less than i.', 'section': 'Encoder and Decoder Stacks', 'sec_num': '3.1'}, {'text': 'An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum Scaled Dot-Product Attention Multi-Head Attention of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.', 'section': 'Attention', 'sec_num': '3.2'}, {'text': 'We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2 ). The input consists of queries and keys of dimension d k , and values of dimension d v . We compute the dot products of the query with all keys, divide each by \u221a d k , and apply a softmax function to obtain the weights on the values.', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V . We compute the matrix of outputs as:', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'EQUATION', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'The two most commonly used attention functions are additive attention [2] , and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of 1', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '\u221a d k', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'While for small values of d k the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d k [3] . We suspect that for large values of d k , the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients4 . To counteract this effect, we scale the dot products by 1', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '\u221a d k .', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k , d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure 2 .', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'MultiHead(Q, K, V ) = Concat(head 1 , ..., head h )W O', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'where', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'head i = Attention(QW Q i , KW K i , V W V i )', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Where the projections are parameter matrices', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'W Q i \u2208 R dmodel\u00d7d k , W K i \u2208 R dmodel\u00d7d k , W V i \u2208 R dmodel\u00d7dv and W O \u2208 R hdv\u00d7dmodel .', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'In this work we employ h = 8 parallel attention layers, or heads. For each of these we use', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'd k = d v = d model /h = 64.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'The Transformer uses multi-head attention in three different ways:', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [38, 2, 9] .', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to -\u221e) all values in the input of the softmax which correspond to illegal connections. See Figure 2 .', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': 'In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'EQUATION', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'The dimensionality of input and output is d model = 512, and the inner-layer has dimensionality d f f = 2048.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model . We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [30] . In the embedding layers, we multiply those weights by \u221a d model . ', 'section': 'Embeddings and Softmax', 'sec_num': '3.4'}, {'text': '(n 2 \u2022 d) O(1) O(1) Recurrent O(n \u2022 d 2 ) O(n) O(n) Convolutional O(k \u2022 n \u2022 d 2 ) O(1) O(log k (n)) Self-Attention (restricted) O(r \u2022 n \u2022 d) O(1) O(n/r)', 'section': 'Embeddings and Softmax', 'sec_num': '3.4'}, {'text': 'Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed [9] .', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'In this work, we use sine and cosine functions of different frequencies:', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'P E (pos,2i) = sin(pos/10000 2i/dmodel ) P E (pos,2i+1) = cos(pos/10000 2i/dmodel )', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'where pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u2022 2\u03c0. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, P E pos+k can be represented as a linear function of P E pos .', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'We also experimented with using learned positional embeddings [9] instead, and found that the two versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1 , ..., x n ) to another sequence of equal length (z 1 , ..., z n ), with x i , z i \u2208 R d , such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [12] . Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'As noted in Table 1 , a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n is smaller than the representation dimensionality d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [38] and byte-pair [31] representations. To improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of size r in the input sequence centered around the respective output position. This would increase the maximum path length to O(n/r). We plan to investigate this approach further in future work.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'A single convolutional layer with kernel width k < n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(log k (n)) in the case of dilated convolutions [18] , increasing the length of the longest paths between any two positions in the network. Convolutional layers are generally more expensive than recurrent layers, by a factor of k. Separable convolutions [6] , however, decrease the complexity considerably, to O(k', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': '\u2022 n \u2022 d + n \u2022 d 2 ).', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'Even with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'As side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'This section describes the training regime for our models.', 'section': 'Training', 'sec_num': '5'}, {'text': 'We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding [3] , which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary [38] . Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.', 'section': 'Training Data and Batching', 'sec_num': '5.1'}, {'text': 'We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table 3 ), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days).', 'section': 'Hardware and Schedule', 'sec_num': '5.2'}, {'text': 'We used the Adam optimizer [20] with \u03b2 1 = 0.9, \u03b2 2 = 0.98 and \u03f5 = 10 -9 . We varied the learning rate over the course of training, according to the formula:', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'EQUATION', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'This corresponds to increasing the learning rate linearly for the first warmup_steps training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used warmup_steps = 4000.', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'We employ three types of regularization during training: Residual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.', 'section': 'Regularization', 'sec_num': '5.4'}, {'text': 'During training, we employed label smoothing of value \u03f5 ls = 0.1 [36] . This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.', 'section': 'Label Smoothing', 'sec_num': None}, {'text': '6 Results', 'section': 'Label Smoothing', 'sec_num': None}, {'text': 'On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2 ) outperforms the best previously reported models (including ensembles) by more than 2.0 BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is listed in the bottom line of Table 3 . Training took 3.5 days on 8 P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models.', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0, outperforming all of the previously published single models, at less than 1/4 the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout rate P drop = 0.1, instead of 0.3.', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of 4 and length penalty \u03b1 = 0.6 [38] . These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length + 50, but terminate early when possible [38] .', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'Table 2 summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU5 .', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the . We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table 3 .', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section 3.2.2. While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'In Table 3 rows (B), we observe that reducing the attention key size d k hurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9] , and observe nearly identical results to the base model.', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37] .', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'We trained a 4-layer transformer with d model = 1024 on the Wall Street Journal (WSJ) portion of the Penn Treebank [25] , about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences [37] . We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'We performed only a small number of experiments to select the dropout, both attention and residual (section 5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3 for both WSJ only and the semi-supervised setting.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'Our results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar [8] .', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'In contrast to RNN sequence-to-sequence models [37] , the Transformer outperforms the Berkeley-Parser [29] even when training only on the WSJ training set of 40K sentences.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'We are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video. Making generation less sequential is another research goals of ours.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'The code we used to train and evaluate our models is available at https://github.com/ tensorflow/tensor2tensor. ', 'section': 'Conclusion', 'sec_num': '7'}, {'text': \"The Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.\", 'section': 'Input-Input Layer5', 'sec_num': None}, {'text': 'The ', 'section': 'Input-Input Layer5', 'sec_num': None}, {'text': 'To illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1. Then their dot product, q \u2022 k = d k i=1 qiki, has mean 0 and variance d k .', 'section': '', 'sec_num': None}, {'text': 'We used values of 2.8, 3.7,', 'section': '', 'sec_num': None}, {'text': '6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.', 'section': '', 'sec_num': None}], 'back_matter': [{'text': 'Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments, corrections and inspiration.', 'section': 'acknowledgement', 'sec_num': None}], 'ref_entries': {'FIGREF0': {'text': 'Figure 1: The Transformer -model architecture.', 'num': None, 'type_str': 'figure', 'fig_num': '1', 'uris': None}, 'FIGREF1': {'text': 'Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.', 'num': None, 'type_str': 'figure', 'fig_num': '2', 'uris': None}, 'FIGREF2': {'text': \"Figure 3: An example of the attention mechanism following long-distance dependencies in the encoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of the verb 'making', completing the phrase 'making...more difficult'. Attentions here shown only for the word 'making'. Different colors represent different heads. Best viewed in color.\", 'num': None, 'type_str': 'figure', 'fig_num': '3', 'uris': None}, 'FIGREF3': {'text': \"Figure4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top: Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.\", 'num': None, 'type_str': 'figure', 'fig_num': '4', 'uris': None}, 'FIGREF4': {'text': 'Figure5: Many of the attention heads exhibit behaviour that seems related to the structure of the sentence. We give two such examples above, from two different heads from the encoder self-attention at layer 5 of 6. The heads clearly learned to perform different tasks.', 'num': None, 'type_str': 'figure', 'fig_num': '5', 'uris': None}, 'TABREF0': {'text': 'Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Layer Type</td><td>Complexity per Layer Sequential Maximum Path Length</td></tr><tr><td/><td>Operations</td></tr><tr><td>Self-Attention</td><td>O</td></tr></table>'}, 'TABREF1': {'text': 'The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Model</td><td colspan=\"2\">BLEU EN-DE EN-FR</td><td>Training Cost (FLOPs) EN-DE EN-FR</td></tr><tr><td>ByteNet [18]</td><td>23.75</td><td/><td/></tr><tr><td>Deep-Att + PosUnk [39]</td><td/><td>39.2</td><td>1.0 \u2022 10 20</td></tr><tr><td>GNMT + RL [38]</td><td>24.6</td><td>39.92</td><td>2.3 \u2022 10 19 1.4 \u2022 10 20</td></tr><tr><td>ConvS2S [9]</td><td>25.16</td><td>40.46</td><td>9.6 \u2022 10 18 1.5 \u2022 10 20</td></tr><tr><td>MoE [32]</td><td>26.03</td><td>40.56</td><td>2.0 \u2022 10 19 1.2 \u2022 10 20</td></tr><tr><td>Deep-Att + PosUnk Ensemble [39]</td><td/><td>40.4</td><td>8.0 \u2022 10 20</td></tr><tr><td>GNMT + RL Ensemble [38]</td><td>26.30</td><td>41.16</td><td>1.8 \u2022 10 20 1.1 \u2022 10 21</td></tr><tr><td>ConvS2S Ensemble [9]</td><td>26.36</td><td>41.29</td><td>7.7 \u2022 10 19 1.2 \u2022 10 21</td></tr><tr><td>Transformer (base model)</td><td>27.3</td><td>38.1</td><td>3.3 \u2022 10 18</td></tr><tr><td>Transformer (big)</td><td>28.4</td><td>41.8</td><td>2.3 \u2022 10 19</td></tr></table>'}, 'TABREF2': {'text': 'Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td/><td colspan=\"2\">N d model</td><td>d ff</td><td>h</td><td>d k</td><td>d v</td><td colspan=\"2\">P drop \u03f5 ls</td><td>train steps (dev) (dev) PPL BLEU params \u00d710 6</td></tr><tr><td colspan=\"2\">base 6</td><td>512</td><td colspan=\"2\">2048 8</td><td>64</td><td>64</td><td>0.1</td><td colspan=\"2\">0.1 100K 4.92</td><td>25.8</td><td>65</td></tr><tr><td/><td/><td/><td/><td colspan=\"3\">1 512 512</td><td/><td/><td>5.29</td><td>24.9</td></tr><tr><td>(A)</td><td/><td/><td/><td colspan=\"3\">4 128 128 16 32 32</td><td/><td/><td>5.00 4.91</td><td>25.5 25.8</td></tr><tr><td/><td/><td/><td/><td colspan=\"2\">32 16</td><td>16</td><td/><td/><td>5.01</td><td>25.4</td></tr><tr><td>(B)</td><td/><td/><td/><td/><td>16 32</td><td/><td/><td/><td>5.16 5.01</td><td>25.1 25.4</td><td>58 60</td></tr><tr><td/><td>2</td><td/><td/><td/><td/><td/><td/><td/><td>6.11</td><td>23.7</td><td>36</td></tr><tr><td/><td>4</td><td/><td/><td/><td/><td/><td/><td/><td>5.19</td><td>25.3</td><td>50</td></tr><tr><td/><td>8</td><td/><td/><td/><td/><td/><td/><td/><td>4.88</td><td>25.5</td><td>80</td></tr><tr><td>(C)</td><td/><td>256</td><td/><td/><td>32</td><td>32</td><td/><td/><td>5.75</td><td>24.5</td><td>28</td></tr><tr><td/><td/><td>1024</td><td/><td/><td colspan=\"2\">128 128</td><td/><td/><td>4.66</td><td>26.0</td><td>168</td></tr><tr><td/><td/><td/><td>1024</td><td/><td/><td/><td/><td/><td>5.12</td><td>25.4</td><td>53</td></tr><tr><td/><td/><td/><td>4096</td><td/><td/><td/><td/><td/><td>4.75</td><td>26.2</td><td>90</td></tr><tr><td/><td/><td/><td/><td/><td/><td/><td>0.0</td><td/><td>5.77</td><td>24.6</td></tr><tr><td>(D)</td><td/><td/><td/><td/><td/><td/><td>0.2</td><td>0.0</td><td>4.95 4.67</td><td>25.5 25.3</td></tr><tr><td/><td/><td/><td/><td/><td/><td/><td/><td>0.2</td><td>5.47</td><td>25.7</td></tr><tr><td>(E)</td><td/><td colspan=\"7\">positional embedding instead of sinusoids</td><td>4.92</td><td>25.7</td></tr><tr><td>big</td><td>6</td><td colspan=\"3\">1024 4096 16</td><td/><td/><td>0.3</td><td/><td>300K 4.33</td><td>26.4</td><td>213</td></tr><tr><td colspan=\"4\">development set, newstest2013</td><td/><td/><td/><td/><td/></tr></table>'}, 'TABREF3': {'text': 'The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Parser</td><td>Training</td><td>WSJ 23 F1</td></tr><tr><td colspan=\"2\">Vinyals &amp; Kaiser el al. (2014) [37] WSJ only, discriminative</td><td>88.3</td></tr><tr><td>Petrov et al. (2006) [29]</td><td>WSJ only, discriminative</td><td>90.4</td></tr><tr><td>Zhu et al. (2013) [40]</td><td>WSJ only, discriminative</td><td>90.4</td></tr><tr><td>Dyer et al. (2016) [8]</td><td>WSJ only, discriminative</td><td>91.7</td></tr><tr><td>Transformer (4 layers)</td><td>WSJ only, discriminative</td><td>91.3</td></tr><tr><td>Zhu et al. (2013) [40]</td><td>semi-supervised</td><td>91.3</td></tr><tr><td>Huang &amp; Harper (2009) [14]</td><td>semi-supervised</td><td>91.3</td></tr><tr><td>McClosky et al. (2006) [26]</td><td>semi-supervised</td><td>92.1</td></tr><tr><td>Vinyals &amp; Kaiser el al. (2014) [37]</td><td>semi-supervised</td><td>92.1</td></tr><tr><td>Transformer (4 layers)</td><td>semi-supervised</td><td>92.7</td></tr><tr><td>Luong et al. (2015) [23]</td><td>multi-task</td><td>93.0</td></tr><tr><td>Dyer et al. (2016) [8]</td><td>generative</td><td>93.3</td></tr></table>'}}}}\n\nCode Repository:\n\n```python\n## File name: dataset_loader.py\n\"\"\"dataset_loader.py\nThis module defines the DatasetLoader class responsible for loading\nand preprocessing datasets for machine translation (MT) and constituency parsing.\nIt uses SentencePiece for tokenization (BPE/word-piece) and groups examples into dynamic batches\nbased on a maximum token count per batch.\n\"\"\"\n\nimport os\nimport logging\nfrom typing import List, Tuple, Dict, Any\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, Sampler\nimport sentencepiece as spm\n\n# Set up basic logging configuration.\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef pad_collate_fn(batch: List[Tuple[List[int], List[int]]]) -> Dict[str, torch.Tensor]:\n    \"\"\"\n    Collate function that pads a batch of tokenized examples.\n    Each example is a tuple: (source_token_ids, target_token_ids).\n    Returns a dictionary containing padded tensors and corresponding masks.\n    \"\"\"\n    src_list = [torch.tensor(item[0], dtype=torch.long) for item in batch]\n    tgt_list = [torch.tensor(item[1], dtype=torch.long) for item in batch]\n    padded_src = torch.nn.utils.rnn.pad_sequence(src_list, batch_first=True, padding_value=0)\n    padded_tgt = torch.nn.utils.rnn.pad_sequence(tgt_list, batch_first=True, padding_value=0)\n    src_mask = (padded_src != 0)\n    tgt_mask = (padded_tgt != 0)\n    return {\"src\": padded_src, \"tgt\": padded_tgt, \"src_mask\": src_mask, \"tgt_mask\": tgt_mask}\n\n\nclass SimpleDataset(Dataset):\n    \"\"\"\n    A simple dataset wrapper which holds a list of tokenized examples.\n    Each example is a tuple: (source_token_ids, target_token_ids).\n    \"\"\"\n    def __init__(self, examples: List[Tuple[List[int], List[int]]]) -> None:\n        self.examples = examples\n\n    def __len__(self) -> int:\n        return len(self.examples)\n\n    def __getitem__(self, idx: int) -> Tuple[List[int], List[int]]:\n        return self.examples[idx]\n\n\nclass DynamicBatchSampler(Sampler):\n    \"\"\"\n    A custom batch sampler that groups examples into batches based on a maximum token count threshold.\n    The condition is that for a given batch, both the sum of source tokens and the sum of target tokens\n    do not exceed max_tokens.\n    \"\"\"\n    def __init__(self, data: Dataset, max_tokens: int) -> None:\n        self.data = data  # data items are tuples: (src, tgt)\n        self.max_tokens = max_tokens\n        self.indices = list(range(len(data)))\n        # Sort indices by the length of the source sequence (for better bucketing)\n        self.indices.sort(key=lambda i: len(data[i][0]))\n\n    def __iter__(self):\n        batch = []\n        src_sum = 0\n        tgt_sum = 0\n\n        for idx in self.indices:\n            src_len = len(self.data[idx][0])\n            tgt_len = len(self.data[idx][1])\n            # If adding the new example surpasses the max_tokens limit on either side and batch is non-empty, yield current batch.\n            if batch and (src_sum + src_len > self.max_tokens or tgt_sum + tgt_len > self.max_tokens):\n                yield batch\n                batch = []\n                src_sum = 0\n                tgt_sum = 0\n            batch.append(idx)\n            src_sum += src_len\n            tgt_sum += tgt_len\n\n        if batch:\n            yield batch\n\n    def __len__(self) -> int:\n        # Count the number of batches by iterating over the sampler.\n        count = 0\n        temp_batch = []\n        src_sum = 0\n        tgt_sum = 0\n        for idx in self.indices:\n            src_len = len(self.data[idx][0])\n            tgt_len = len(self.data[idx][1])\n            if temp_batch and (src_sum + src_len > self.max_tokens or tgt_sum + tgt_len > self.max_tokens):\n                count += 1\n                temp_batch = []\n                src_sum = 0\n                tgt_sum = 0\n            temp_batch.append(idx)\n            src_sum += src_len\n            tgt_sum += tgt_len\n        if temp_batch:\n            count += 1\n        return count\n\n\nclass DatasetLoader:\n    \"\"\"\n    The DatasetLoader class loads and preprocesses datasets for machine translation and constituency parsing.\n    It utilizes SentencePiece for tokenization and returns DataLoader objects organized by experiment type and split.\n    \"\"\"\n\n    def __init__(self, config: Dict[str, Any]) -> None:\n        \"\"\"\n        Initializes DatasetLoader with the given configuration.\n        Extracts dataset settings, initializes tokenizers (SentencePiece),\n        and sets batch size limits.\n        \"\"\"\n        self.config = config\n        # Extract batch size tokens for translation; default to 25000 tokens if not provided.\n        self.batch_size_tokens: int = config.get(\"dataset\", {}).get(\"translation\", {}).get(\"batch_size_tokens\", 25000)\n\n        # Dictionaries to store SentencePieceProcessor for each dataset.\n        self.mt_tokenizers: Dict[str, spm.SentencePieceProcessor] = {}\n        self.parsing_tokenizers: Dict[str, spm.SentencePieceProcessor] = {}\n\n        # Initialize tokenizers for machine translation datasets.\n        translation_config = config.get(\"dataset\", {}).get(\"translation\", {})\n        for dataset_key, dataset_spec in translation_config.items():\n            if dataset_key == \"batch_size_tokens\":\n                continue\n            # Set default vocabulary sizes and determine model type based on tokenization description.\n            if dataset_key == \"en_de\":\n                vocab_size = 37000\n                model_type = \"bpe\"  # Byte-Pair Encoding\n            elif dataset_key == \"en_fr\":\n                vocab_size = 32000\n                model_type = \"unigram\"  # Word-piece segmentation often uses unigram models.\n            else:\n                vocab_size = 32000\n                model_type = \"bpe\"\n            processor = self._get_or_train_tokenizer(\n                dataset_type=\"translation\",\n                dataset_key=dataset_key,\n                vocab_size=vocab_size,\n                model_type=model_type\n            )\n            self.mt_tokenizers[dataset_key] = processor\n\n        # Initialize tokenizers for parsing datasets.\n        parsing_config = config.get(\"dataset\", {}).get(\"parsing\", {})\n        for dataset_key, dataset_spec in parsing_config.items():\n            vocab_size = dataset_spec.get(\"vocabulary_size\", 16000)\n            model_type = \"bpe\"  # Using BPE for parsing as default.\n            processor = self._get_or_train_tokenizer(\n                dataset_type=\"parsing\",\n                dataset_key=dataset_key,\n                vocab_size=vocab_size,\n                model_type=model_type\n            )\n            self.parsing_tokenizers[dataset_key] = processor\n\n    def _get_or_train_tokenizer(self, dataset_type: str, dataset_key: str, vocab_size: int, model_type: str) -> spm.SentencePieceProcessor:\n        \"\"\"\n        Loads an existing SentencePiece model if available, otherwise trains one\n        using the raw training data for the specified dataset.\n        \"\"\"\n        model_prefix = f\"spm_{dataset_key}\"\n        model_file = model_prefix + \".model\"\n        sp = spm.SentencePieceProcessor()\n        if os.path.exists(model_file):\n            sp.Load(model_file)\n            logging.info(f\"Loaded existing SentencePiece model from {model_file} for {dataset_key} ({dataset_type}).\")\n        else:\n            logging.info(f\"Training SentencePiece model for {dataset_key} ({dataset_type}) with vocab size {vocab_size} and model type {model_type}.\")\n            # Determine the training input file(s) based on dataset type.\n            if dataset_type == \"translation\":\n                # For translation, use both source and target training files.\n                if dataset_key == \"en_de\":\n                    src_lang, tgt_lang = \"en\", \"de\"\n                elif dataset_key == \"en_fr\":\n                    src_lang, tgt_lang = \"en\", \"fr\"\n                else:\n                    src_lang, tgt_lang = \"en\", \"other\"\n\n                train_src = os.path.join(\"data\", \"translation\", dataset_key, f\"train.{src_lang}\")\n                train_tgt = os.path.join(\"data\", \"translation\", dataset_key, f\"train.{tgt_lang}\")\n                if not os.path.exists(train_src) or not os.path.exists(train_tgt):\n                    logging.error(f\"Training files for {dataset_key} translation not found: {train_src} or {train_tgt}\")\n                    raise FileNotFoundError(f\"Training files for {dataset_key} translation not found.\")\n                # Combine source and target files into one.\n                combined_file = os.path.join(\"data\", \"translation\", dataset_key, \"train_combined.txt\")\n                with open(combined_file, \"w\", encoding=\"utf-8\") as outfile:\n                    for fname in [train_src, train_tgt]:\n                        with open(fname, \"r\", encoding=\"utf-8\") as infile:\n                            for line in infile:\n                                outfile.write(line)\n            elif dataset_type == \"parsing\":\n                # For parsing, use the training file.\n                combined_file = os.path.join(\"data\", \"parsing\", dataset_key, \"train.txt\")\n                if not os.path.exists(combined_file):\n                    logging.error(f\"Training file for {dataset_key} parsing not found: {combined_file}\")\n                    raise FileNotFoundError(f\"Training file for {dataset_key} parsing not found.\")\n            else:\n                logging.error(f\"Unknown dataset type: {dataset_type}\")\n                raise ValueError(\"Unknown dataset type.\")\n\n            # Train the SentencePiece model.\n            spm.SentencePieceTrainer.Train(\n                input=combined_file,\n                model_prefix=model_prefix,\n                vocab_size=vocab_size,\n                model_type=model_type,\n                character_coverage=1.0,\n                pad_id=0,\n                unk_id=1,\n                bos_id=2,\n                eos_id=3\n            )\n            sp.Load(model_file)\n            logging.info(f\"Trained and loaded SentencePiece model from {model_file} for {dataset_key} ({dataset_type}).\")\n        return sp\n\n    def load_data(self) -> Dict[str, Any]:\n        \"\"\"\n        Loads and preprocesses the datasets for machine translation and parsing experiments.\n        Returns a dictionary with the following structure:\n          {\n            \"translation\": {\n                \"en_de\": {\"train\": DataLoader, \"val\": DataLoader, \"test\": DataLoader},\n                \"en_fr\": {\"train\": DataLoader, \"val\": DataLoader, \"test\": DataLoader}\n             },\n            \"parsing\": {\n                \"wsj\": {\"train\": DataLoader, \"val\": DataLoader, \"test\": DataLoader},\n                \"semi_supervised\": {\"train\": DataLoader, ...}\n             }\n          }\n        \"\"\"\n        data_dict: Dict[str, Any] = {\"translation\": {}, \"parsing\": {}}\n\n        # Process machine translation datasets.\n        translation_config = self.config.get(\"dataset\", {}).get(\"translation\", {})\n        for dataset_key, dataset_spec in translation_config.items():\n            if dataset_key == \"batch_size_tokens\":\n                continue\n            splits = [\"train\", \"val\", \"test\"]\n            lang_pair_data = {}\n            for split in splits:\n                examples = self._load_translation_split(dataset_key, split)\n                if len(examples) == 0:\n                    logging.warning(f\"No examples found for translation dataset {dataset_key} split {split}.\")\n                dataset = SimpleDataset(examples)\n                batch_sampler = DynamicBatchSampler(dataset, self.batch_size_tokens)\n                dataloader = DataLoader(dataset, batch_sampler=batch_sampler, collate_fn=pad_collate_fn)\n                lang_pair_data[split] = dataloader\n            data_dict[\"translation\"][dataset_key] = lang_pair_data\n\n        # Process constituency parsing datasets.\n        parsing_config = self.config.get(\"dataset\", {}).get(\"parsing\", {})\n        for dataset_key, dataset_spec in parsing_config.items():\n            splits = [\"train\", \"val\", \"test\"]\n            parsing_data = {}\n            for split in splits:\n                examples = self._load_parsing_split(dataset_key, split)\n                if len(examples) == 0:\n                    logging.warning(f\"No examples found for parsing dataset {dataset_key} split {split}.\")\n                dataset = SimpleDataset(examples)\n                batch_sampler = DynamicBatchSampler(dataset, self.batch_size_tokens)\n                dataloader = DataLoader(dataset, batch_sampler=batch_sampler, collate_fn=pad_collate_fn)\n                parsing_data[split] = dataloader\n            data_dict[\"parsing\"][dataset_key] = parsing_data\n\n        return data_dict\n\n    def _load_translation_split(self, dataset_key: str, split: str) -> List[Tuple[List[int], List[int]]]:\n        \"\"\"\n        Loads a translation dataset split (train/val/test) for a given language pair.\n        Reads raw source and target text files, applies tokenization using the appropriate SentencePiece model,\n        and returns a list of (tokenized_src, tokenized_tgt) examples.\n        \"\"\"\n        if dataset_key == \"en_de\":\n            src_lang, tgt_lang = \"en\", \"de\"\n        elif dataset_key == \"en_fr\":\n            src_lang, tgt_lang = \"en\", \"fr\"\n        else:\n            src_lang, tgt_lang = \"en\", \"other\"\n\n        base_dir = os.path.join(\"data\", \"translation\", dataset_key)\n        src_file = os.path.join(base_dir, f\"{split}.{src_lang}\")\n        tgt_file = os.path.join(base_dir, f\"{split}.{tgt_lang}\")\n\n        if not (os.path.exists(src_file) and os.path.exists(tgt_file)):\n            logging.error(f\"Translation files for {dataset_key} split {split} not found: {src_file}, {tgt_file}.\")\n            return []\n\n        examples: List[Tuple[List[int], List[int]]] = []\n        with open(src_file, \"r\", encoding=\"utf-8\") as f_src, open(tgt_file, \"r\", encoding=\"utf-8\") as f_tgt:\n            src_lines = f_src.readlines()\n            tgt_lines = f_tgt.readlines()\n            if len(src_lines) != len(tgt_lines):\n                logging.warning(f\"Source and target file lengths do not match for {dataset_key} {split}.\")\n            for src_line, tgt_line in zip(src_lines, tgt_lines):\n                src_line = src_line.strip()\n                tgt_line = tgt_line.strip()\n                if not src_line or not tgt_line:\n                    continue\n                sp_processor = self.mt_tokenizers.get(dataset_key)\n                src_ids = sp_processor.encode(src_line, out_type=int)\n                tgt_ids = sp_processor.encode(tgt_line, out_type=int)\n                examples.append((src_ids, tgt_ids))\n        logging.info(f\"Loaded {len(examples)} examples for translation dataset {dataset_key} split {split}.\")\n        return examples\n\n    def _load_parsing_split(self, dataset_key: str, split: str) -> List[Tuple[List[int], List[int]]]:\n        \"\"\"\n        Loads a constituency parsing dataset split (train/val/test) for a given dataset.\n        Assumes each line in the raw data file is formatted as 'sentence ||| parse_tree'.\n        Returns a list of (tokenized_sentence, tokenized_parse_tree) examples.\n        \"\"\"\n        base_dir = os.path.join(\"data\", \"parsing\", dataset_key)\n        file_path = os.path.join(base_dir, f\"{split}.txt\")\n        if not os.path.exists(file_path):\n            logging.error(f\"Parsing file for {dataset_key} split {split} not found: {file_path}.\")\n            return []\n\n        examples: List[Tuple[List[int], List[int]]] = []\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            lines = f.readlines()\n            for line in lines:\n                line = line.strip()\n                if not line:\n                    continue\n                # Expecting a delimiter \"|||\"\n                if \"|||\" in line:\n                    parts = line.split(\"|||\")\n                    if len(parts) < 2:\n                        continue\n                    src_sentence = parts[0].strip()\n                    tgt_tree = parts[1].strip()\n                else:\n                    continue  # Skip if delimiter not found.\n                sp_processor = self.parsing_tokenizers.get(dataset_key)\n                src_ids = sp_processor.encode(src_sentence, out_type=int)\n                tgt_ids = sp_processor.encode(tgt_tree, out_type=int)\n                examples.append((src_ids, tgt_ids))\n        logging.info(f\"Loaded {len(examples)} examples for parsing dataset {dataset_key} split {split}.\")\n        return examples\n\n```\n\n```python\n## File name: model.py\n\"\"\"model.py\nThis module implements the Transformer model architecture as described in \"Attention Is All You Need\".\nIt includes all core components:\n  - PositionalEncoding: Computes sinusoidal positional encodings.\n  - MultiHeadAttention: Implements multi-head scaled dot-product attention.\n  - PositionWiseFeedForward: Implements the two-layer feed-forward network.\n  - EncoderLayer and DecoderLayer: Single layers for the encoder and decoder stacks.\n  - Encoder and Decoder: Stacks of the respective layers.\n  - TransformerModel: The full encoder-decoder model with shared token embeddings and final projection.\n  \nAll hyperparameters and configurations are read from the configuration dictionary (derived from config.yaml).\n\"\"\"\n\nimport math\nfrom typing import Optional\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass PositionalEncoding(nn.Module):\n    \"\"\"\n    Implements the sinusoidal positional encoding.\n    Precomputes a positional encoding lookup table up to a maximum length.\n    \"\"\"\n    def __init__(self, d_model: int, dropout: float = 0.1, max_len: int = 5000) -> None:\n        super(PositionalEncoding, self).__init__()\n        self.dropout: nn.Dropout = nn.Dropout(p=dropout)\n\n        # Create constant 'pe' matrix with values dependent on\n        # pos and i\n        pe: torch.Tensor = torch.zeros(max_len, d_model)\n        position: torch.Tensor = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)  # shape: (max_len, 1)\n        div_term: torch.Tensor = torch.exp(torch.arange(0, d_model, 2, dtype=torch.float) *\n                                             -(math.log(10000.0) / d_model))\n        # Apply sin to even indices and cos to odd indices\n        pe[:, 0::2] = torch.sin(position * div_term)   # even indices\n        pe[:, 1::2] = torch.cos(position * div_term)   # odd indices\n        pe = pe.unsqueeze(0)  # shape: (1, max_len, d_model)\n        # Register as buffer (not a parameter, but persistent)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Tensor of shape (batch_size, seq_len, d_model)\n        Returns:\n            Tensor of shape (batch_size, seq_len, d_model) after adding positional encoding.\n        \"\"\"\n        seq_len: int = x.size(1)\n        x = x + self.pe[:, :seq_len]\n        return self.dropout(x)\n\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\"\n    Implements multi-head scaled dot-product attention.\n    Projects inputs into queries, keys, and values, computes attention, and then recombines results.\n    \"\"\"\n    def __init__(self, d_model: int, num_heads: int, dropout: float = 0.1) -> None:\n        super(MultiHeadAttention, self).__init__()\n        assert d_model % num_heads == 0, \"d_model must be divisible by num_heads\"\n        self.d_model: int = d_model\n        self.num_heads: int = num_heads\n        self.d_k: int = d_model // num_heads\n\n        self.linear_q: nn.Linear = nn.Linear(d_model, d_model)\n        self.linear_k: nn.Linear = nn.Linear(d_model, d_model)\n        self.linear_v: nn.Linear = nn.Linear(d_model, d_model)\n        self.linear_out: nn.Linear = nn.Linear(d_model, d_model)\n        self.dropout: nn.Dropout = nn.Dropout(p=dropout)\n\n    def forward(self, query: torch.Tensor, key: torch.Tensor, value: torch.Tensor,\n                mask: Optional[torch.Tensor] = None) -> torch.Tensor:\n        \"\"\"\n        Args:\n            query: Tensor of shape (batch_size, query_len, d_model)\n            key: Tensor of shape (batch_size, key_len, d_model)\n            value: Tensor of shape (batch_size, value_len, d_model)\n            mask: Optional tensor of shape (batch_size, seq_len) where True indicates valid positions.\n                  The mask is applied on the key side.\n        Returns:\n            Tensor of shape (batch_size, query_len, d_model) after attention.\n        \"\"\"\n        batch_size: int = query.size(0)\n\n        # Linear projections\n        q: torch.Tensor = self.linear_q(query)  # (batch, query_len, d_model)\n        k: torch.Tensor = self.linear_k(key)      # (batch, key_len, d_model)\n        v: torch.Tensor = self.linear_v(value)    # (batch, value_len, d_model)\n\n        # Reshape and transpose: split d_model into (num_heads, d_k)\n        # New shape: (batch, num_heads, seq_len, d_k)\n        def transform(x: torch.Tensor) -> torch.Tensor:\n            return x.view(batch_size, -1, self.num_heads, self.d_k).transpose(1, 2)\n\n        q = transform(q)\n        k = transform(k)\n        v = transform(v)\n\n        # Scaled dot-product attention\n        # scores shape: (batch, num_heads, query_len, key_len)\n        scores: torch.Tensor = torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)\n\n        if mask is not None:\n            # Assume mask shape: (batch, key_len)\n            # Expand mask to (batch, 1, 1, key_len) for broadcasting over heads and query length.\n            mask_expanded: torch.Tensor = mask.unsqueeze(1).unsqueeze(2)  # shape: (batch, 1, 1, key_len)\n            scores = scores.masked_fill(~mask_expanded, float('-1e9'))\n\n        attn: torch.Tensor = F.softmax(scores, dim=-1)\n        attn = self.dropout(attn)\n        x: torch.Tensor = torch.matmul(attn, v)  # (batch, num_heads, query_len, d_k)\n        # Concatenate heads: transpose and reshape back to (batch, query_len, d_model)\n        x = x.transpose(1, 2).contiguous().view(batch_size, -1, self.d_model)\n        return self.linear_out(x)  # Final linear projection\n\n\nclass PositionWiseFeedForward(nn.Module):\n    \"\"\"\n    Implements position-wise feed-forward network.\n    Consists of two linear transformations with a ReLU activation in between.\n    \"\"\"\n    def __init__(self, d_model: int, d_ff: int, dropout: float = 0.1) -> None:\n        super(PositionWiseFeedForward, self).__init__()\n        self.linear1: nn.Linear = nn.Linear(d_model, d_ff)\n        self.linear2: nn.Linear = nn.Linear(d_ff, d_model)\n        self.dropout: nn.Dropout = nn.Dropout(p=dropout)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Tensor of shape (batch_size, seq_len, d_model)\n        Returns:\n            Tensor of shape (batch_size, seq_len, d_model) after feed-forward transformation.\n        \"\"\"\n        return self.linear2(self.dropout(F.relu(self.linear1(x))))\n\n\nclass EncoderLayer(nn.Module):\n    \"\"\"\n    Implements a single encoder layer.\n    Each layer contains a multi-head self-attention sub-layer and a position-wise feed-forward sub-layer,\n    each followed by dropout, residual connection, and layer normalization.\n    \"\"\"\n    def __init__(self, d_model: int, d_ff: int, num_heads: int, dropout: float = 0.1) -> None:\n        super(EncoderLayer, self).__init__()\n        self.self_attn: MultiHeadAttention = MultiHeadAttention(d_model, num_heads, dropout)\n        self.ff: PositionWiseFeedForward = PositionWiseFeedForward(d_model, d_ff, dropout)\n        self.norm1: nn.LayerNorm = nn.LayerNorm(d_model)\n        self.norm2: nn.LayerNorm = nn.LayerNorm(d_model)\n        self.dropout: nn.Dropout = nn.Dropout(p=dropout)\n\n    def forward(self, x: torch.Tensor, mask: Optional[torch.Tensor] = None) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Tensor of shape (batch_size, seq_len, d_model)\n            mask: Optional tensor for attending over padding positions (batch_size, seq_len)\n        Returns:\n            Tensor of shape (batch_size, seq_len, d_model)\n        \"\"\"\n        # Self-attention sub-layer with residual connection and layer normalization.\n        attn_out: torch.Tensor = self.self_attn(x, x, x, mask)\n        x = self.norm1(x + self.dropout(attn_out))\n        # Feed-forward sub-layer with residual connection and layer normalization.\n        ff_out: torch.Tensor = self.ff(x)\n        x = self.norm2(x + self.dropout(ff_out))\n        return x\n\n\nclass Encoder(nn.Module):\n    \"\"\"\n    Stacks multiple EncoderLayer modules.\n    \"\"\"\n    def __init__(self, num_layers: int, d_model: int, num_heads: int, d_ff: int, dropout: float = 0.1) -> None:\n        super(Encoder, self).__init__()\n        self.layers: nn.ModuleList = nn.ModuleList(\n            [EncoderLayer(d_model, d_ff, num_heads, dropout) for _ in range(num_layers)]\n        )\n        self.norm: nn.LayerNorm = nn.LayerNorm(d_model)\n\n    def forward(self, x: torch.Tensor, mask: Optional[torch.Tensor] = None) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Tensor of shape (batch_size, seq_len, d_model)\n            mask: Optional mask tensor for self-attention.\n        Returns:\n            Processed tensor of shape (batch_size, seq_len, d_model)\n        \"\"\"\n        for layer in self.layers:\n            x = layer(x, mask)\n        return self.norm(x)\n\n\nclass DecoderLayer(nn.Module):\n    \"\"\"\n    Implements a single decoder layer.\n    Each layer contains:\n      1. A self-attention sub-layer (with causal masking).\n      2. An encoder-decoder attention sub-layer.\n      3. A position-wise feed-forward sub-layer.\n    Each sub-layer includes residual connections and layer normalization.\n    \"\"\"\n    def __init__(self, d_model: int, d_ff: int, num_heads: int, dropout: float = 0.1) -> None:\n        super(DecoderLayer, self).__init__()\n        self.self_attn: MultiHeadAttention = MultiHeadAttention(d_model, num_heads, dropout)\n        self.cross_attn: MultiHeadAttention = MultiHeadAttention(d_model, num_heads, dropout)\n        self.ff: PositionWiseFeedForward = PositionWiseFeedForward(d_model, d_ff, dropout)\n        self.norm1: nn.LayerNorm = nn.LayerNorm(d_model)\n        self.norm2: nn.LayerNorm = nn.LayerNorm(d_model)\n        self.norm3: nn.LayerNorm = nn.LayerNorm(d_model)\n        self.dropout: nn.Dropout = nn.Dropout(p=dropout)\n\n    def forward(self, x: torch.Tensor, memory: torch.Tensor,\n                src_mask: Optional[torch.Tensor] = None,\n                tgt_mask: Optional[torch.Tensor] = None) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Decoder input tensor of shape (batch_size, tgt_seq_len, d_model)\n            memory: Encoder output tensor of shape (batch_size, src_seq_len, d_model)\n            src_mask: Mask for the encoder output (batch_size, src_seq_len)\n            tgt_mask: Mask for the decoder self-attention (batch_size, tgt_seq_len)\n        Returns:\n            Tensor of shape (batch_size, tgt_seq_len, d_model)\n        \"\"\"\n        # Self-attention in the decoder\n        self_attn_out: torch.Tensor = self.self_attn(x, x, x, tgt_mask)\n        x = self.norm1(x + self.dropout(self_attn_out))\n        # Encoder-decoder (cross) attention: queries come from decoder, keys/values from encoder output.\n        cross_attn_out: torch.Tensor = self.cross_attn(x, memory, memory, src_mask)\n        x = self.norm2(x + self.dropout(cross_attn_out))\n        # Feed-forward network sub-layer.\n        ff_out: torch.Tensor = self.ff(x)\n        x = self.norm3(x + self.dropout(ff_out))\n        return x\n\n\nclass Decoder(nn.Module):\n    \"\"\"\n    Stacks multiple DecoderLayer modules.\n    \"\"\"\n    def __init__(self, num_layers: int, d_model: int, num_heads: int, d_ff: int, dropout: float = 0.1) -> None:\n        super(Decoder, self).__init__()\n        self.layers: nn.ModuleList = nn.ModuleList(\n            [DecoderLayer(d_model, d_ff, num_heads, dropout) for _ in range(num_layers)]\n        )\n        self.norm: nn.LayerNorm = nn.LayerNorm(d_model)\n\n    def forward(self, x: torch.Tensor, memory: torch.Tensor,\n                src_mask: Optional[torch.Tensor] = None,\n                tgt_mask: Optional[torch.Tensor] = None) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Decoder input tensor of shape (batch_size, tgt_seq_len, d_model)\n            memory: Encoder outputs of shape (batch_size, src_seq_len, d_model)\n            src_mask: Source mask tensor (batch_size, src_seq_len)\n            tgt_mask: Target mask tensor (batch_size, tgt_seq_len)\n        Returns:\n            Processed tensor of shape (batch_size, tgt_seq_len, d_model)\n        \"\"\"\n        for layer in self.layers:\n            x = layer(x, memory, src_mask, tgt_mask)\n        return self.norm(x)\n\n\nclass TransformerModel(nn.Module):\n    \"\"\"\n    Implements the complete Transformer model with encoder and decoder stacks.\n    It includes:\n      - Shared token embeddings (for source and target)\n      - Sinusoidal positional encoding\n      - Encoder stack\n      - Decoder stack\n      - Final linear projection (whose weights are tied with the token embedding)\n    \n    The forward() method takes:\n      src: Source tokens tensor (batch_size, src_seq_len)\n      tgt: Target tokens tensor (batch_size, tgt_seq_len)\n      src_mask: Mask tensor for source (batch_size, src_seq_len)\n      tgt_mask: Mask tensor for target (batch_size, tgt_seq_len)\n    \n    Returns:\n      Logits over the vocabulary of shape (batch_size, tgt_seq_len, vocab_size)\n    \"\"\"\n    def __init__(self, params: dict) -> None:\n        \"\"\"\n        Initializes the TransformerModel.\n        Expected keys in params:\n          - num_layers (int): Number of encoder/decoder layers.\n          - d_model (int): Embedding dimension.\n          - d_ff (int): Feed-forward network inner layer dimension.\n          - num_heads (int): Number of attention heads.\n          - dropout (float): Dropout rate.\n          - vocab_size (int): Size of the vocabulary (shared for source and target).\n        Default values are provided if keys are missing.\n        \"\"\"\n        super(TransformerModel, self).__init__()\n        # Extract hyperparameters with defaults\n        self.num_layers: int = params.get(\"num_layers\", 6)\n        self.d_model: int = params.get(\"d_model\", 512)\n        self.d_ff: int = params.get(\"d_ff\", 2048)\n        self.num_heads: int = params.get(\"num_heads\", 8)\n        self.dropout_rate: float = params.get(\"dropout\", 0.1)\n        self.vocab_size: int = params.get(\"vocab_size\", 37000)\n\n        # Shared token embedding layer\n        self.embedding: nn.Embedding = nn.Embedding(self.vocab_size, self.d_model)\n        # Positional Encoding layer\n        self.pos_encoding: PositionalEncoding = PositionalEncoding(self.d_model, dropout=self.dropout_rate)\n\n        # Encoder and Decoder stacks\n        self.encoder: Encoder = Encoder(self.num_layers, self.d_model, self.num_heads, self.d_ff, self.dropout_rate)\n        self.decoder: Decoder = Decoder(self.num_layers, self.d_model, self.num_heads, self.d_ff, self.dropout_rate)\n\n        # Final linear layer to project decoder outputs to vocabulary logits\n        self.fc_out: nn.Linear = nn.Linear(self.d_model, self.vocab_size, bias=False)\n        # Tie the weights of the final projection with the embedding layer as per the paper.\n        self.fc_out.weight = self.embedding.weight\n\n    def forward(self, src: torch.Tensor, tgt: torch.Tensor,\n                src_mask: Optional[torch.Tensor] = None,\n                tgt_mask: Optional[torch.Tensor] = None) -> torch.Tensor:\n        \"\"\"\n        Args:\n            src: Source token indices of shape (batch_size, src_seq_len)\n            tgt: Target token indices of shape (batch_size, tgt_seq_len)\n            src_mask: Optional mask for source (batch_size, src_seq_len), where True indicates valid tokens.\n            tgt_mask: Optional mask for target (batch_size, tgt_seq_len), where True indicates valid tokens.\n        Returns:\n            Logits tensor of shape (batch_size, tgt_seq_len, vocab_size)\n        \"\"\"\n        # Embed source tokens and scale by sqrt(d_model)\n        src_emb: torch.Tensor = self.embedding(src) * math.sqrt(self.d_model)\n        # Add positional encodings\n        src_emb = self.pos_encoding(src_emb)\n        # Process through encoder stack\n        memory: torch.Tensor = self.encoder(src_emb, src_mask)\n\n        # Embed target tokens and scale by sqrt(d_model)\n        tgt_emb: torch.Tensor = self.embedding(tgt) * math.sqrt(self.d_model)\n        # Add positional encodings\n        tgt_emb = self.pos_encoding(tgt_emb)\n        # Process through decoder stack with attention to encoder outputs\n        decoder_out: torch.Tensor = self.decoder(tgt_emb, memory, src_mask, tgt_mask)\n\n        # Project decoder outputs to logits over the vocabulary\n        logits: torch.Tensor = self.fc_out(decoder_out)\n        return logits\n\n```\n\n```python\n## File name: utils.py\n\"\"\"utils.py\nThis module holds common helper functions shared by Trainer, Evaluation, and other modules.\nIt provides:\n  - Configuration parsing from a YAML file.\n  - A learning rate scheduler function according to the Transformer paper.\n  - A checkpoint averaging utility that averages multiple PyTorch model state dictionaries.\n  - Logging setup helpers.\n  - Additional utility functions for debugging and file existence checks.\n  \nDependencies:\n  - PyYAML (for YAML parsing)\n  - torch (for checkpoint operations)\n  - logging, os, math, json (standard libraries)\n  \nAll functions use strong type annotations and default values where needed.\n\"\"\"\n\nimport os\nimport math\nimport logging\nimport json\nfrom typing import Dict, Any, List, Optional\n\nimport torch\nimport yaml\n\n\ndef parse_config(config_path: str) -> Dict[str, Any]:\n    \"\"\"\n    Parses a YAML configuration file and returns a configuration dictionary.\n    \n    Args:\n        config_path (str): Path to the YAML configuration file.\n        \n    Returns:\n        config (Dict[str, Any]): Dictionary containing configuration parameters.\n    \n    Raises:\n        FileNotFoundError: If the configuration file does not exist.\n        ValueError: If required sections are missing in the configuration.\n        yaml.YAMLError: If there is an error parsing the YAML file.\n    \"\"\"\n    if not os.path.isfile(config_path):\n        raise FileNotFoundError(f\"Configuration file not found at path: {config_path}\")\n    \n    try:\n        with open(config_path, \"r\", encoding=\"utf-8\") as file:\n            config: Dict[str, Any] = yaml.safe_load(file)\n    except yaml.YAMLError as exc:\n        raise yaml.YAMLError(f\"Error parsing YAML configuration: {exc}\")\n    \n    # Validate that required sections are present.\n    required_sections: List[str] = [\"training\", \"hyperparameters\", \"dataset\", \"inference\"]\n    for section in required_sections:\n        if section not in config:\n            raise ValueError(f\"Required configuration section '{section}' is missing.\")\n    \n    return config\n\n\ndef get_learning_rate(d_model: int, step: int, warmup_steps: int) -> float:\n    \"\"\"\n    Computes the learning rate at a given training step as per the Transformer paper.\n    \n    The formula is:\n      lr = (d_model)^(-0.5) * min(step^(-0.5), step * (warmup_steps)^(-1.5))\n    \n    Args:\n        d_model (int): The dimension of the model embeddings.\n        step (int): The current training step (should be >= 1).\n        warmup_steps (int): The number of warmup steps.\n    \n    Returns:\n        lr (float): The computed learning rate.\n    \n    Note:\n        If step is less than 1, it defaults to 1 to avoid division by zero.\n    \"\"\"\n    current_step: int = step if step >= 1 else 1\n    lr: float = (d_model ** -0.5) * min(current_step ** -0.5, current_step * (warmup_steps ** -1.5))\n    return lr\n\n\ndef average_checkpoints(checkpoint_paths: List[str]) -> Dict[str, torch.Tensor]:\n    \"\"\"\n    Averages the model state dictionaries from a list of checkpoint file paths.\n    \n    For every key in the state dictionaries, an element-wise average of the tensors\n    is computed and returned as a new state dictionary.\n    \n    Args:\n        checkpoint_paths (List[str]): List of file paths to PyTorch checkpoint state dicts.\n    \n    Returns:\n        averaged_state (Dict[str, torch.Tensor]): A state dictionary with averaged parameters.\n    \n    Raises:\n        ValueError: If no checkpoint paths are provided, or if checkpoint keys/shapes do not match.\n    \"\"\"\n    if not checkpoint_paths:\n        raise ValueError(\"No checkpoint paths provided for averaging.\")\n    \n    averaged_state: Dict[str, torch.Tensor] = {}\n    num_checkpoints: int = len(checkpoint_paths)\n    \n    for idx, path in enumerate(checkpoint_paths):\n        if not os.path.isfile(path):\n            raise FileNotFoundError(f\"Checkpoint file not found: {path}\")\n        \n        checkpoint_state: Dict[str, torch.Tensor] = torch.load(path, map_location=\"cpu\")\n        \n        if idx == 0:\n            # Initialize the averaged_state dictionary with clones of the first checkpoint's values.\n            for key, value in checkpoint_state.items():\n                averaged_state[key] = value.clone().float()\n        else:\n            # Ensure that keys match between checkpoints.\n            if checkpoint_state.keys() != averaged_state.keys():\n                raise ValueError(f\"Checkpoint keys do not match in file: {path}\")\n            for key, value in checkpoint_state.items():\n                if averaged_state[key].shape != value.shape:\n                    raise ValueError(f\"Shape mismatch for key '{key}' in checkpoint: {path}\")\n                averaged_state[key] += value.clone().float()\n    \n    # Divide each parameter by the number of checkpoints.\n    for key in averaged_state.keys():\n        averaged_state[key] /= num_checkpoints\n    \n    return averaged_state\n\n\ndef setup_logger(log_file: Optional[str] = None, level: int = logging.INFO) -> logging.Logger:\n    \"\"\"\n    Sets up the logger to output messages to the console and optionally to a file.\n    \n    Args:\n        log_file (Optional[str]): Path to a log file. If provided, logs are written to the file as well.\n        level (int): Logging level (e.g., logging.INFO, logging.DEBUG). Default is logging.INFO.\n    \n    Returns:\n        logger (logging.Logger): Configured logger instance.\n    \"\"\"\n    logger: logging.Logger = logging.getLogger(\"TransformerLogger\")\n    logger.setLevel(level)\n    \n    # Clear existing handlers to avoid duplicate logs.\n    if logger.hasHandlers():\n        logger.handlers.clear()\n    \n    formatter: logging.Formatter = logging.Formatter(\n        fmt='%(asctime)s - %(levelname)s - %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    )\n    \n    # Console handler.\n    console_handler: logging.StreamHandler = logging.StreamHandler()\n    console_handler.setLevel(level)\n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)\n    \n    # File handler if log_file is specified.\n    if log_file:\n        file_handler: logging.FileHandler = logging.FileHandler(log_file)\n        file_handler.setLevel(level)\n        file_handler.setFormatter(formatter)\n        logger.addHandler(file_handler)\n    \n    return logger\n\n\ndef pretty_print_config(config: Dict[str, Any]) -> None:\n    \"\"\"\n    Pretty prints the configuration dictionary in JSON format.\n    \n    Args:\n        config (Dict[str, Any]): The configuration dictionary.\n    \"\"\"\n    pretty_config: str = json.dumps(config, indent=2)\n    print(pretty_config)\n\n\ndef check_file_exists(file_path: str) -> bool:\n    \"\"\"\n    Checks whether a file exists at the given path.\n    \n    Args:\n        file_path (str): The path to the file.\n    \n    Returns:\n        exists (bool): True if the file exists, False otherwise.\n    \"\"\"\n    return os.path.isfile(file_path)\n\n\n# Example usage of the utility functions (for testing purposes).\nif __name__ == \"__main__\":\n    # Set up logger for testing.\n    test_logger: logging.Logger = setup_logger(level=logging.DEBUG)\n    test_logger.info(\"Testing utils.py functionalities...\")\n    \n    # Test configuration parsing.\n    test_config_path: str = \"config.yaml\"\n    try:\n        config: Dict[str, Any] = parse_config(test_config_path)\n        test_logger.info(\"Configuration parsed successfully:\")\n        pretty_print_config(config)\n    except Exception as e:\n        test_logger.error(f\"Failed to parse configuration: {e}\")\n    \n    # Test learning rate scheduler.\n    d_model_test: int = config.get(\"hyperparameters\", {}).get(\"base_model\", {}).get(\"d_model\", 512)\n    warmup_steps_test: int = config.get(\"training\", {}).get(\"warmup_steps\", 4000)\n    for step in [0, 1, 1000, 10000]:\n        lr: float = get_learning_rate(d_model_test, step, warmup_steps_test)\n        test_logger.info(f\"Learning rate at step {step}: {lr:.6f}\")\n    \n    # Test checkpoint averaging (assuming dummy checkpoints exist).\n    # For demonstration, create two dummy state dicts and save them temporarily.\n    dummy_state1: Dict[str, torch.Tensor] = {\"param1\": torch.ones(2, 2), \"param2\": torch.ones(3)}\n    dummy_state2: Dict[str, torch.Tensor] = {\"param1\": 2 * torch.ones(2, 2), \"param2\": 2 * torch.ones(3)}\n    dummy_path1: str = \"dummy_checkpoint1.pt\"\n    dummy_path2: str = \"dummy_checkpoint2.pt\"\n    torch.save(dummy_state1, dummy_path1)\n    torch.save(dummy_state2, dummy_path2)\n    \n    try:\n        averaged_state: Dict[str, torch.Tensor] = average_checkpoints([dummy_path1, dummy_path2])\n        test_logger.info(\"Averaged checkpoint state:\")\n        for key, tensor in averaged_state.items():\n            test_logger.info(f\"{key}: {tensor}\")\n    except Exception as error:\n        test_logger.error(f\"Checkpoint averaging failed: {error}\")\n    finally:\n        # Clean up dummy checkpoint files.\n        if os.path.exists(dummy_path1):\n            os.remove(dummy_path1)\n        if os.path.exists(dummy_path2):\n            os.remove(dummy_path2)\n    \n    test_logger.info(\"All utils tests completed successfully.\")\n\n```\n\n```python\n## File name: trainer.py\n\"\"\"trainer.py\nThis module implements the Trainer class responsible for the training loop of the Transformer model.\nIt orchestrates optimizer initialization, learning rate scheduling according to the paper,\nloss computation with label smoothing, checkpoint saving and averaging, and logging & validation.\nAll configuration parameters are read from config.yaml.\n\"\"\"\n\nimport os\nimport time\nimport math\nimport logging\nfrom typing import Dict, Any, List\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom tqdm import tqdm\n\nfrom utils import get_learning_rate, average_checkpoints, setup_logger\n\n\nclass Trainer:\n    \"\"\"Trainer class to manage training of the Transformer model.\n\n    Attributes:\n        model (nn.Module): The Transformer model.\n        data (Dict[str, Any]): A dictionary containing training and validation data loaders.\n        config (Dict[str, Any]): Configuration parameters loaded from config.yaml.\n        optimizer (torch.optim.Optimizer): Optimizer for model parameters.\n        warmup_steps (int): Number of warmup steps for learning rate scheduling.\n        d_model (int): Model embedding dimension.\n        global_step (int): Global step counter.\n        checkpoint_paths (List[str]): List of checkpoint file paths saved during training.\n        label_smoothing (float): Label smoothing factor.\n        train_dataloader (DataLoader): DataLoader for training data.\n        val_dataloader (DataLoader): DataLoader for validation data.\n        checkpoint_dir (str): Directory to save checkpoints.\n        validate_interval (int): Interval (in steps) to perform validation.\n        checkpoint_interval (int): Interval (in steps) to save checkpoints.\n        model_variant (str): Model variant, either \"base_model\" or \"big_model\".\n        total_steps (int): Total training steps as specified in the configuration.\n        device (torch.device): The training device (CPU or CUDA).\n    \"\"\"\n\n    def __init__(self, model: nn.Module, data: Dict[str, Any], config: Dict[str, Any]) -> None:\n        \"\"\"\n        Initializes the Trainer with the provided model, data, and configuration.\n\n        Args:\n            model (nn.Module): The Transformer model.\n            data (Dict[str, Any]): Dictionary containing data loaders.\n            config (Dict[str, Any]): Configuration dictionary from config.yaml.\n        \"\"\"\n        self.model = model\n        self.data = data\n        self.config = config\n\n        training_config: Dict[str, Any] = config.get(\"training\", {})\n        beta1: float = training_config.get(\"beta1\", 0.9)\n        beta2: float = training_config.get(\"beta2\", 0.98)\n        epsilon: float = training_config.get(\"epsilon\", 1e-9)\n        self.warmup_steps: int = training_config.get(\"warmup_steps\", 4000)\n\n        hyperparams: Dict[str, Any] = config.get(\"hyperparameters\", {})\n        base_model_params: Dict[str, Any] = hyperparams.get(\"base_model\", {\"d_model\": 512, \"label_smoothing\": 0.1})\n        big_model_params: Dict[str, Any] = hyperparams.get(\"big_model\", {\"d_model\": 1024, \"label_smoothing\": 0.1})\n        # Determine model variant based on the embedding dimension.\n        model_embedding_dim: int = getattr(self.model.embedding, \"embedding_dim\", base_model_params.get(\"d_model\", 512))\n        if model_embedding_dim == big_model_params.get(\"d_model\", 1024):\n            self.model_variant = \"big_model\"\n            self.total_steps: int = training_config.get(\"big_train_steps\", 300000)\n            self.checkpoint_count: int = 20\n        else:\n            self.model_variant = \"base_model\"\n            self.total_steps: int = training_config.get(\"base_train_steps\", 100000)\n            self.checkpoint_count: int = 5\n\n        self.d_model: int = model_embedding_dim\n\n        self.optimizer = torch.optim.Adam(\n            self.model.parameters(), lr=0.0, betas=(beta1, beta2), eps=epsilon\n        )\n        self.global_step: int = 0\n        self.checkpoint_paths: List[str] = []\n\n        # Get label smoothing factor from corresponding hyperparameters.\n        self.label_smoothing: float = hyperparams.get(self.model_variant, {}).get(\"label_smoothing\", 0.1)\n\n        # Setup device and move model to device.\n        self.device: torch.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        self.model.to(self.device)\n\n        # Retrieve training and validation data loaders.\n        if \"translation\" in self.data and \"en_de\" in self.data[\"translation\"]:\n            self.train_dataloader = self.data[\"translation\"][\"en_de\"].get(\"train\")\n            self.val_dataloader = self.data[\"translation\"][\"en_de\"].get(\"val\")\n        elif \"translation\" in self.data:\n            first_key: str = list(self.data[\"translation\"].keys())[0]\n            self.train_dataloader = self.data[\"translation\"][first_key].get(\"train\")\n            self.val_dataloader = self.data[\"translation\"][first_key].get(\"val\")\n        elif \"parsing\" in self.data and \"wsj\" in self.data[\"parsing\"]:\n            self.train_dataloader = self.data[\"parsing\"][\"wsj\"].get(\"train\")\n            self.val_dataloader = self.data[\"parsing\"][\"wsj\"].get(\"val\")\n        else:\n            raise ValueError(\"No valid training data found in the provided data dictionary.\")\n\n        self.checkpoint_dir: str = \"checkpoints\"\n        if not os.path.exists(self.checkpoint_dir):\n            os.makedirs(self.checkpoint_dir)\n\n        # Set default intervals for validation and checkpointing.\n        self.validate_interval: int = 1000\n        self.checkpoint_interval: int = 1000\n\n        self.logger = setup_logger()\n\n    def compute_loss(self, logits: torch.Tensor, target: torch.Tensor) -> torch.Tensor:\n        \"\"\"\n        Computes the label-smoothed cross-entropy loss for the given logits and target tokens.\n\n        Args:\n            logits (torch.Tensor): Logits from the model of shape (batch_size, seq_len, vocab_size).\n            target (torch.Tensor): Ground truth token indices of shape (batch_size, seq_len).\n\n        Returns:\n            torch.Tensor: The computed loss value.\n        \"\"\"\n        vocab_size: int = logits.size(-1)\n        log_probs: torch.Tensor = F.log_softmax(logits, dim=-1)\n        # Flatten logits and target tensors.\n        log_probs_flat: torch.Tensor = log_probs.contiguous().view(-1, vocab_size)\n        target_flat: torch.Tensor = target.contiguous().view(-1)\n        smoothing: float = self.label_smoothing\n\n        with torch.no_grad():\n            true_dist: torch.Tensor = torch.zeros_like(log_probs_flat)\n            true_dist.fill_(smoothing / (vocab_size - 1))\n            true_dist.scatter_(1, target_flat.unsqueeze(1), 1.0 - smoothing)\n        # Create mask to ignore pad tokens (assumed pad index is 0).\n        non_pad_mask: torch.Tensor = target_flat.ne(0).float()\n        loss: torch.Tensor = -(true_dist * log_probs_flat).sum(dim=1)\n        loss = loss * non_pad_mask\n        average_loss: torch.Tensor = loss.sum() / non_pad_mask.sum().clamp(min=1)\n        return average_loss\n\n    def save_checkpoint(self) -> None:\n        \"\"\"\n        Saves a checkpoint of the model and optimizer state at the current global step.\n        The checkpoint is stored in the designated checkpoint directory.\n        \"\"\"\n        checkpoint: Dict[str, Any] = {\n            \"step\": self.global_step,\n            \"model_state\": self.model.state_dict(),\n            \"optimizer_state\": self.optimizer.state_dict(),\n        }\n        checkpoint_file: str = os.path.join(self.checkpoint_dir, f\"checkpoint_{self.global_step}.pt\")\n        torch.save(checkpoint, checkpoint_file)\n        self.checkpoint_paths.append(checkpoint_file)\n        self.logger.info(f\"Saved checkpoint: {checkpoint_file}\")\n\n    def average_checkpoints_final(self) -> None:\n        \"\"\"\n        Averages the last few saved checkpoints and saves the averaged model state as the final checkpoint.\n        The number of checkpoints averaged is determined by the model variant.\n        \"\"\"\n        if len(self.checkpoint_paths) < self.checkpoint_count:\n            self.logger.warning(\"Not enough checkpoints to average. Skipping checkpoint averaging.\")\n            return\n        selected_checkpoints: List[str] = self.checkpoint_paths[-self.checkpoint_count:]\n        self.logger.info(f\"Averaging the last {self.checkpoint_count} checkpoints...\")\n        averaged_state: Dict[str, torch.Tensor] = average_checkpoints(selected_checkpoints)\n        final_checkpoint_file: str = os.path.join(self.checkpoint_dir, \"final_checkpoint.pt\")\n        torch.save(averaged_state, final_checkpoint_file)\n        self.logger.info(f\"Saved averaged final checkpoint: {final_checkpoint_file}\")\n\n    def validate(self) -> Dict[str, float]:\n        \"\"\"\n        Runs the model in evaluation mode on the validation dataset and computes the average validation loss.\n\n        Returns:\n            Dict[str, float]: A dictionary containing validation metrics (e.g., average loss).\n        \"\"\"\n        self.model.eval()\n        total_loss: float = 0.0\n        total_tokens: int = 0\n        with torch.no_grad():\n            for batch in self.val_dataloader:\n                src: torch.Tensor = batch[\"src\"].to(self.device)\n                tgt: torch.Tensor = batch[\"tgt\"].to(self.device)\n                src_mask: torch.Tensor = batch[\"src_mask\"].to(self.device)\n                tgt_mask: torch.Tensor = batch[\"tgt_mask\"].to(self.device)\n                # Teacher forcing: use decoder input as tgt[:, :-1] and target for loss as tgt[:, 1:].\n                tgt_input: torch.Tensor = tgt[:, :-1]\n                tgt_target: torch.Tensor = tgt[:, 1:]\n                tgt_mask_input: torch.Tensor = tgt_mask[:, :-1]\n                logits: torch.Tensor = self.model(src, tgt_input, src_mask, tgt_mask_input)\n                loss: torch.Tensor = self.compute_loss(logits, tgt_target)\n                non_pad: int = tgt_target.ne(0).sum().item()\n                total_loss += loss.item() * non_pad\n                total_tokens += non_pad\n        avg_loss: float = total_loss / total_tokens if total_tokens > 0 else float('inf')\n        self.logger.info(f\"Validation Loss at step {self.global_step}: {avg_loss:.4f}\")\n        self.model.train()\n        return {\"validation_loss\": avg_loss}\n\n    def train(self) -> None:\n        \"\"\"\n        Executes the training loop for the Transformer model.\n        The loop carries out forward passes, loss computation with label smoothing, backpropagation,\n        optimizer updates with a custom learning rate scheduler, periodic validation, and checkpoint saving.\n        \"\"\"\n        self.model.train()\n        train_iterator = iter(self.train_dataloader)\n        progress_bar = tqdm(total=self.total_steps, desc=\"Training\", unit=\"step\")\n        start_time_overall = time.perf_counter()\n\n        while self.global_step < self.total_steps:\n            try:\n                batch = next(train_iterator)\n            except StopIteration:\n                train_iterator = iter(self.train_dataloader)\n                batch = next(train_iterator)\n\n            step_start_time = time.perf_counter()\n\n            # Move batch tensors to the designated device.\n            src: torch.Tensor = batch[\"src\"].to(self.device)\n            tgt: torch.Tensor = batch[\"tgt\"].to(self.device)\n            src_mask: torch.Tensor = batch[\"src_mask\"].to(self.device)\n            tgt_mask: torch.Tensor = batch[\"tgt_mask\"].to(self.device)\n\n            # Prepare decoder inputs and targets (shift by one position).\n            tgt_input: torch.Tensor = tgt[:, :-1]\n            tgt_target: torch.Tensor = tgt[:, 1:]\n            tgt_mask_input: torch.Tensor = tgt_mask[:, :-1]\n\n            # Forward pass through the model.\n            logits: torch.Tensor = self.model(src, tgt_input, src_mask, tgt_mask_input)\n\n            # Compute label-smoothed loss.\n            loss: torch.Tensor = self.compute_loss(logits, tgt_target)\n\n            # Backpropagation.\n            self.optimizer.zero_grad()\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(self.model.parameters(), max_norm=1.0)\n            self.optimizer.step()\n\n            # Increment global step.\n            self.global_step += 1\n\n            # Update learning rate as per the schedule.\n            current_lr: float = get_learning_rate(self.d_model, self.global_step, self.warmup_steps)\n            for param_group in self.optimizer.param_groups:\n                param_group[\"lr\"] = current_lr\n\n            step_end_time = time.perf_counter()\n            step_time: float = step_end_time - step_start_time\n\n            progress_bar.update(1)\n            progress_bar.set_postfix({\n                \"Step\": self.global_step,\n                \"Loss\": f\"{loss.item():.4f}\",\n                \"LR\": f\"{current_lr:.6f}\",\n                \"StepTime\": f\"{step_time:.4f}s\"\n            })\n\n            # Perform periodic validation.\n            if self.global_step % self.validate_interval == 0:\n                self.validate()\n\n            # Save checkpoint at defined intervals.\n            if self.global_step % self.checkpoint_interval == 0:\n                self.save_checkpoint()\n\n        progress_bar.close()\n        total_time: float = time.perf_counter() - start_time_overall\n        self.logger.info(f\"Training completed in {total_time:.2f} seconds after {self.global_step} steps.\")\n        self.validate()\n        self.average_checkpoints_final()\n\n```\n\n```python\n## File name: evaluation.py\n\"\"\"evaluation.py\nThis module defines the Evaluation class that assesses a trained Transformer model\nusing beam search decoding, and then reports the final evaluation metrics.\nFor machine translation tasks it computes BLEU (using sacreBLEU) and for constituency\nparsing tasks, a token-overlap based F1 score is computed as a proxy.\nAll inference parameters (beam size, length penalty, maximum output length offset) are read\nfrom the configuration (config.yaml). This module strictly follows the design and interfaces.\n\"\"\"\n\nimport math\nimport logging\nfrom typing import Any, Dict, List\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport sacrebleu\n\n# Constants for special tokens (as set in SentencePiece during tokenization)\nBOS_TOKEN: int = 2  # Beginning-of-sequence token\nEOS_TOKEN: int = 3  # End-of-sequence token\nPAD_TOKEN: int = 0  # Padding token\n\n\nclass Evaluation:\n    \"\"\"\n    Evaluation class that uses beam search decoding to generate predictions\n    for a test dataset and then computes evaluation metrics.\n    \n    Attributes:\n        model (nn.Module): The trained TransformerModel.\n        data (Dict[str, Any]): Dictionary with test data loaders.\n        config (Dict[str, Any]): Configuration dictionary (from config.yaml).\n        task (str): The current task (\"translation\" or \"parsing\").\n        test_dataloader: The DataLoader for the test split.\n        beam_size (int): Beam search beam size.\n        length_penalty (float): Length penalty for candidate score adjustment.\n        max_output_offset (int): The offset that is added to the input length to determine maximum output length.\n        device (torch.device): Computation device.\n        logger (logging.Logger): Logger for evaluation messages.\n    \"\"\"\n\n    def __init__(self, model: nn.Module, data: Dict[str, Any], config: Dict[str, Any]) -> None:\n        \"\"\"\n        Initializes Evaluation with the given model, evaluation data, and configuration.\n        It determines the current task by inspecting the provided data and config.\n        It also extracts inference parameters (beam search settings) from config.\n        \"\"\"\n        self.model: nn.Module = model\n        self.data: Dict[str, Any] = data\n        self.config: Dict[str, Any] = config\n\n        self.device: torch.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        self.model.to(self.device)\n        self.model.eval()  # Set model to evaluation mode\n\n        # Determine the evaluation task and select the appropriate test dataloader.\n        if \"translation\" in self.data and len(self.data[\"translation\"]) > 0:\n            self.task = \"translation\"\n            # Select the first available translation dataset (e.g., \"en_de\" or \"en_fr\")\n            dataset_key: str = list(self.data[\"translation\"].keys())[0]\n            self.test_dataloader = self.data[\"translation\"][dataset_key].get(\"test\")\n            inference_conf: Dict[str, Any] = self.config.get(\"inference\", {}).get(\"translation\", {})\n        elif \"parsing\" in self.data and len(self.data[\"parsing\"]) > 0:\n            self.task = \"parsing\"\n            # Select the first available parsing dataset (e.g., \"wsj\")\n            dataset_key = list(self.data[\"parsing\"].keys())[0]\n            self.test_dataloader = self.data[\"parsing\"][dataset_key].get(\"test\")\n            inference_conf = self.config.get(\"inference\", {}).get(\"parsing\", {})\n        else:\n            raise ValueError(\"No valid evaluation data found in the provided data dictionary.\")\n\n        # Extract beam search settings from the inference configuration.\n        beam_search_conf: Dict[str, Any] = inference_conf.get(\"beam_search\", {})\n        if self.task == \"translation\":\n            self.beam_size: int = beam_search_conf.get(\"beam_size\", 4)\n            self.length_penalty: float = beam_search_conf.get(\"length_penalty\", 0.6)\n            max_output_expr: Any = beam_search_conf.get(\"max_output_length\", \"input_length + 50\")\n        else:  # parsing\n            self.beam_size = beam_search_conf.get(\"beam_size\", 21)\n            self.length_penalty = beam_search_conf.get(\"length_penalty\", 0.3)\n            max_output_expr = beam_search_conf.get(\"max_output_length\", \"input_length + 300\")\n        self.max_output_offset: int = self._parse_max_output_offset(max_output_expr)\n\n        # Set up logger.\n        self.logger = logging.getLogger(\"Evaluation\")\n        if not self.logger.hasHandlers():\n            self.logger.setLevel(logging.INFO)\n            console_handler = logging.StreamHandler()\n            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n            console_handler.setFormatter(formatter)\n            self.logger.addHandler(console_handler)\n\n    def _parse_max_output_offset(self, expr: Any) -> int:\n        \"\"\"\n        Parses the max output length expression from config.\n        Expected format: \"input_length + <offset>\" or an integer.\n        Returns the integer offset value.\n        \"\"\"\n        if isinstance(expr, int):\n            return expr\n        elif isinstance(expr, str):\n            if \"input_length\" in expr:\n                parts = expr.split(\"+\")\n                if len(parts) == 2:\n                    try:\n                        return int(parts[1].strip())\n                    except ValueError:\n                        return 50  # Default offset for translation\n                else:\n                    return 50\n            else:\n                try:\n                    return int(expr)\n                except ValueError:\n                    return 50\n        else:\n            return 50\n\n    def _beam_search(self, src: torch.Tensor, src_mask: torch.Tensor, beam_size: int,\n                     length_penalty: float, max_length: int) -> List[int]:\n        \"\"\"\n        Performs beam search decoding for a single source input.\n\n        Args:\n            src (torch.Tensor): Source tensor of shape (1, src_seq_len).\n            src_mask (torch.Tensor): Source mask tensor of shape (1, src_seq_len).\n            beam_size (int): Beam search beam size.\n            length_penalty (float): Length penalty factor.\n            max_length (int): Maximum output length = input_length + offset.\n\n        Returns:\n            List[int]: The best candidate output token IDs.\n        \"\"\"\n        # Get model dimensions and compute encoder output.\n        d_model: int = self.model.embedding.embedding_dim\n        src_emb: torch.Tensor = self.model.embedding(src) * math.sqrt(d_model)\n        src_emb = self.model.pos_encoding(src_emb)\n        memory: torch.Tensor = self.model.encoder(src_emb, src_mask)\n\n        # Initialize the beam with a single candidate: start with BOS.\n        beam: List[tuple] = [([BOS_TOKEN], 0.0, False)]  # (token_sequence, cumulative_log_prob, finished)\n\n        for _ in range(max_length):\n            new_beam: List[tuple] = []\n            for seq, cum_log_prob, finished in beam:\n                if finished:\n                    new_beam.append((seq, cum_log_prob, finished))\n                    continue\n\n                # Prepare current candidate as target sequence.\n                tgt_seq: torch.Tensor = torch.tensor(seq, dtype=torch.long, device=self.device).unsqueeze(0)\n                # Create target mask (all positions valid since no padding, using ones).\n                tgt_mask: torch.Tensor = torch.ones((1, tgt_seq.size(1)), dtype=torch.bool, device=self.device)\n\n                # Compute decoder output for the candidate.\n                tgt_emb: torch.Tensor = self.model.embedding(tgt_seq) * math.sqrt(d_model)\n                tgt_emb = self.model.pos_encoding(tgt_emb)\n                decoder_output: torch.Tensor = self.model.decoder(tgt_emb, memory, src_mask, tgt_mask)\n                logits: torch.Tensor = self.model.fc_out(decoder_output)  # Shape: (1, seq_len, vocab_size)\n                last_logits: torch.Tensor = logits[:, -1, :]  # Get logits for the last time step (shape: (1, vocab_size))\n                log_probs: torch.Tensor = torch.log_softmax(last_logits, dim=-1)\n\n                # Select the top beam_size next tokens.\n                topk_log_probs, topk_indices = torch.topk(log_probs, beam_size, dim=-1)\n                topk_log_probs = topk_log_probs.squeeze(0)\n                topk_indices = topk_indices.squeeze(0)\n\n                for i in range(beam_size):\n                    next_token: int = topk_indices[i].item()\n                    token_log_prob: float = topk_log_probs[i].item()\n                    new_seq = seq + [next_token]\n                    new_cum_log_prob = cum_log_prob + token_log_prob\n                    new_finished = (next_token == EOS_TOKEN)\n                    new_beam.append((new_seq, new_cum_log_prob, new_finished))\n\n            # Apply length penalty and select the best candidates.\n            scored_candidates: List[tuple] = []\n            for seq, score, finished in new_beam:\n                length: int = len(seq)\n                penalty: float = ((5 + length) / 6) ** length_penalty\n                penalized_score: float = score / penalty\n                scored_candidates.append((seq, penalized_score, finished))\n            scored_candidates.sort(key=lambda x: x[1], reverse=True)\n            beam = scored_candidates[:beam_size]\n\n            # If all candidates have reached EOS, finish early.\n            if all(finished for (_, _, finished) in beam):\n                break\n\n        # Select the candidate with the best (highest) penalized score.\n        best_seq, best_score, _ = max(beam, key=lambda x: x[1])\n        return best_seq\n\n    def _decode(self, token_ids: List[int]) -> str:\n        \"\"\"\n        Decodes a list of token IDs into a human-readable string.\n        It removes BOS tokens and stops decoding at EOS.\n        \n        Args:\n            token_ids (List[int]): The sequence of token IDs.\n        \n        Returns:\n            str: Decoded string.\n        \"\"\"\n        filtered_tokens: List[str] = []\n        for token in token_ids:\n            if token == BOS_TOKEN:\n                continue\n            if token == EOS_TOKEN:\n                break\n            # Here, we simply convert the integer token to string.\n            # In a full implementation, one would use the original tokenizer's decode method.\n            filtered_tokens.append(str(token))\n        return \" \".join(filtered_tokens)\n\n    def _compute_f1(self, predictions: List[str], references: List[str]) -> float:\n        \"\"\"\n        A simple placeholder function to compute token-level F1 score for constituency parsing.\n        This implementation computes F1 based on overlap between the sets of tokens.\n        \n        Args:\n            predictions (List[str]): List of predicted strings.\n            references (List[str]): List of reference strings.\n        \n        Returns:\n            float: The average F1 score.\n        \"\"\"\n        if not predictions:\n            return 0.0\n        total_f1: float = 0.0\n        for pred, ref in zip(predictions, references):\n            pred_tokens = set(pred.split())\n            ref_tokens = set(ref.split())\n            if not ref_tokens:\n                f1 = 0.0\n            else:\n                common: int = len(pred_tokens.intersection(ref_tokens))\n                precision: float = common / len(pred_tokens) if pred_tokens else 0.0\n                recall: float = common / len(ref_tokens)\n                if precision + recall == 0:\n                    f1 = 0.0\n                else:\n                    f1 = 2 * precision * recall / (precision + recall)\n            total_f1 += f1\n        return total_f1 / len(predictions)\n\n    def evaluate(self) -> Dict[str, float]:\n        \"\"\"\n        Runs the evaluation over the test dataset:\n          - Iterates over each example in the test dataloader.\n          - For each example, performs beam search decoding.\n          - Converts predicted token sequences and reference token sequences to text.\n          - Computes BLEU (for translation) or token-level F1 (for parsing).\n        \n        Returns:\n            Dict[str, float]: A dictionary containing evaluation metrics.\n        \"\"\"\n        self.model.eval()\n        predictions: List[str] = []\n        references: List[str] = []\n\n        with torch.no_grad():\n            for batch in self.test_dataloader:\n                # Expect batch to have keys: \"src\", \"tgt\", \"src_mask\", \"tgt_mask\"\n                src_batch: torch.Tensor = batch[\"src\"].to(self.device)    # Shape: (batch_size, src_seq_len)\n                tgt_batch: torch.Tensor = batch[\"tgt\"].to(self.device)    # Shape: (batch_size, tgt_seq_len)\n                src_mask_batch: torch.Tensor = batch[\"src_mask\"].to(self.device)\n\n                batch_size: int = src_batch.size(0)\n                for i in range(batch_size):\n                    # Determine valid source length (non-pad tokens)\n                    src_mask_i: torch.Tensor = src_mask_batch[i]\n                    valid_length: int = int(src_mask_i.sum().item())\n                    src_example: torch.Tensor = src_batch[i, :valid_length].unsqueeze(0)\n                    src_mask_example: torch.Tensor = src_mask_batch[i, :valid_length].unsqueeze(0)\n\n                    # Maximum output length is defined as (input_length + offset)\n                    max_output_length: int = valid_length + self.max_output_offset\n\n                    # Run beam search decoding for this example.\n                    predicted_token_ids: List[int] = self._beam_search(\n                        src_example, src_mask_example, self.beam_size, self.length_penalty, max_output_length\n                    )\n                    decoded_prediction: str = self._decode(predicted_token_ids)\n                    predictions.append(decoded_prediction)\n\n                    # Decode the reference target.\n                    tgt_example: torch.Tensor = tgt_batch[i]\n                    tgt_mask_i = batch[\"tgt_mask\"][i]\n                    tgt_valid_length: int = int(tgt_mask_i.sum().item())\n                    tgt_tokens: List[int] = tgt_example[:tgt_valid_length].tolist()\n                    decoded_reference: str = self._decode(tgt_tokens)\n                    references.append(decoded_reference)\n\n        results: Dict[str, float] = {}\n        if self.task == \"translation\":\n            # Compute BLEU score using sacreBLEU.\n            bleu = sacrebleu.corpus_bleu(predictions, [references])\n            results = {\"task\": \"translation\", \"BLEU\": bleu.score}\n            self.logger.info(f\"Final Translation BLEU: {bleu.score:.2f}\")\n        elif self.task == \"parsing\":\n            # Compute token-level F1 score as a proxy for parsing F1.\n            f1_score: float = self._compute_f1(predictions, references)\n            results = {\"task\": \"parsing\", \"F1\": f1_score}\n            self.logger.info(f\"Final Parsing F1: {f1_score:.2f}\")\n        else:\n            self.logger.error(\"Unknown evaluation task.\")\n        return results\n\n```\n\n```python\n## File name: main.py\n\"\"\"main.py\nThis is the entry-point script for running the Transformer experiments according to\n\"Attention Is All You Need\". It reads the configuration, loads datasets, instantiates the model,\nsets up training via the Trainer, and finally evaluates the trained model using Evaluation.\nAll configuration parameters are read from config.yaml.\n\"\"\"\n\nimport argparse\nimport sys\nimport os\nimport logging\nfrom typing import Dict, Any\n\n# Import modules from the project\nfrom dataset_loader import DatasetLoader\nfrom model import TransformerModel\nfrom trainer import Trainer\nfrom evaluation import Evaluation\nfrom utils import parse_config, pretty_print_config, setup_logger\n\n\ndef main() -> None:\n    \"\"\"Main function to coordinate the training and evaluation workflow.\"\"\"\n    # Set up argument parser for configuration override options.\n    parser: argparse.ArgumentParser = argparse.ArgumentParser(\n        description=\"Transformer Experiment Runner: reproduces experiments from 'Attention Is All You Need'.\"\n    )\n    parser.add_argument(\n        \"--config\",\n        type=str,\n        default=\"config.yaml\",\n        help=\"Path to the YAML configuration file (default: config.yaml)\"\n    )\n    parser.add_argument(\n        \"--variant\",\n        type=str,\n        choices=[\"base\", \"big\"],\n        default=\"base\",\n        help=\"Model variant to run: 'base' for base model or 'big' for big model (default: base)\"\n    )\n    args: argparse.Namespace = parser.parse_args()\n\n    # Parse the configuration file.\n    try:\n        config: Dict[str, Any] = parse_config(args.config)\n    except Exception as error:\n        print(f\"Error parsing configuration file: {error}\", file=sys.stderr)\n        sys.exit(1)\n\n    # Optionally print the full configuration.\n    pretty_print_config(config)\n\n    # Set up logging.\n    logger: logging.Logger = setup_logger()\n    logger.info(\"Starting Transformer experiment.\")\n\n    # Initialize the DatasetLoader with the parsed configuration.\n    logger.info(\"Initializing dataset loader.\")\n    dataset_loader: DatasetLoader = DatasetLoader(config)\n    data: Dict[str, Any] = dataset_loader.load_data()\n    logger.info(\"Data loading complete.\")\n\n    # Select model hyperparameters based on the chosen variant.\n    # The configuration provides both \"base_model\" and \"big_model\" hyperparameters.\n    hyperparams: Dict[str, Any] = config.get(\"hyperparameters\", {})\n    if args.variant == \"big\":\n        model_params: Dict[str, Any] = hyperparams.get(\"big_model\", {})\n        logger.info(\"Selected model variant: big_model\")\n    else:\n        model_params = hyperparams.get(\"base_model\", {})\n        logger.info(\"Selected model variant: base_model\")\n\n    # Ensure that a vocabulary size is provided. If not, set a default based on dataset.\n    if \"vocab_size\" not in model_params:\n        translation_config: Dict[str, Any] = config.get(\"dataset\", {}).get(\"translation\", {})\n        if \"en_de\" in translation_config:\n            model_params[\"vocab_size\"] = 37000\n        elif \"en_fr\" in translation_config:\n            model_params[\"vocab_size\"] = 32000\n        else:\n            model_params[\"vocab_size\"] = 37000\n        logger.info(f\"Set default vocab_size to {model_params['vocab_size']}.\")\n\n    # Instantiate the Transformer model using the selected hyperparameters.\n    logger.info(\"Instantiating the Transformer model.\")\n    model: TransformerModel = TransformerModel(model_params)\n\n    # Initialize the Trainer with the model, data, and configuration.\n    logger.info(\"Initializing the Trainer.\")\n    trainer: Trainer = Trainer(model, data, config)\n\n    # Begin training.\n    logger.info(\"Starting training loop.\")\n    trainer.train()\n    logger.info(\"Training complete.\")\n\n    # After training, evaluate the trained model.\n    logger.info(\"Starting model evaluation.\")\n    evaluator: Evaluation = Evaluation(model, data, config)\n    evaluation_metrics: Dict[str, float] = evaluator.evaluate()\n\n    # Report final evaluation metrics.\n    logger.info(\"Final Evaluation Metrics:\")\n    for metric_name, metric_value in evaluation_metrics.items():\n        logger.info(f\"{metric_name}: {metric_value}\")\n\n    print(\"Final Evaluation Metrics:\")\n    for metric_name, metric_value in evaluation_metrics.items():\n        print(f\"{metric_name}: {metric_value}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n```yaml\n## File name: config.yaml\n## config.yaml\ntraining:\n  optimizer: \"Adam\"\n  beta1: 0.9\n  beta2: 0.98\n  epsilon: 1e-9\n  warmup_steps: 4000\n  learning_rate_schedule: \"d_model^-0.5 * min(step_num^-0.5, step_num * warmup_steps^-1.5)\"\n  base_train_steps: 100000  # Approximately 12 hours on 8 P100 GPUs\n  big_train_steps: 300000   # Approximately 3.5 days on 8 P100 GPUs\n\nhyperparameters:\n  base_model:\n    num_layers: 6\n    d_model: 512\n    d_ff: 2048\n    num_heads: 8\n    dropout: 0.1\n    label_smoothing: 0.1\n  big_model:\n    num_layers: 6\n    d_model: 1024\n    d_ff: 4096\n    num_heads: 16\n    dropout: 0.1\n\ndataset:\n  translation:\n    en_de:\n      description: \"WMT 2014 English-German dataset (~4.5M sentence pairs)\"\n      tokenization: \"Byte-Pair Encoding with a shared vocabulary of ~37000 tokens\"\n    en_fr:\n      description: \"WMT 2014 English-French dataset (~36M sentence pairs)\"\n      tokenization: \"Word-piece segmentation with a vocabulary of ~32000 tokens\"\n    batch_size_tokens: 25000  # Approximate number of tokens per side in each batch\n  parsing:\n    wsj:\n      description: \"WSJ portion of the Penn Treebank (~40K sentences)\"\n      vocabulary_size: 16000\n    semi_supervised:\n      description: \"High-confidence/BerkeleyParser corpus (~17M sentences)\"\n      vocabulary_size: 32000\n\ninference:\n  translation:\n    beam_search:\n      beam_size: 4\n      length_penalty: 0.6\n      max_output_length: \"input_length + 50\"\n  parsing:\n    beam_search:\n      beam_size: 21\n      length_penalty: 0.3\n      max_output_length: \"input_length + 300\"\n```\n\n\n\n---\n\nPlease provide a critique list for the code repository and a single numerical rating (1, 2, 3, 4, or 5) based on the quality of the sample, following the Example JSON format, without any additional commentary, formatting, or chattiness."}], "reasoning_effort": "high", "n": 1}, "completion_json": {"id": "chatcmpl-C20veWLTv1JcH0cJ1atODlH0BJRPd", "choices": [{"finish_reason": "stop", "index": 0, "logprobs": null, "message": {"content": "{\n  \"critique_list\": [\n    {\n      \"file_name\": \"model.py\",\n      \"func_name\": \"DecoderLayer.forward\",\n      \"severity_level\": \"high\",\n      \"critique\": \"The implementation does not include a proper causal (subsequent) mask for decoder self-attention. Instead of preventing a token from attending to future tokens, only a padding mask is applied. This deviates from the paper's requirement for autoregressive decoding and can lead to leakage of future information.\"\n    },\n    {\n      \"file_name\": \"trainer.py\",\n      \"func_name\": \"train\",\n      \"severity_level\": \"high\",\n      \"critique\": \"During training the target mask is derived solely from non-padding positions, without incorporating the necessary triangular mask to block future positions. This missing step undermines the autoregressive property required by the Transformer model.\"\n    },\n    {\n      \"file_name\": \"evaluation.py\",\n      \"func_name\": \"_decode\",\n      \"severity_level\": \"low\",\n      \"critique\": \"The decoding function simply converts token IDs to strings rather than using the tokenizer's proper decode method, which may lead to mismatches in output formatting but does not directly affect the core model implementation.\"\n    }\n  ],\n  \"score\": 3\n}", "refusal": null, "role": "assistant", "annotations": [], "audio": null, "function_call": null, "tool_calls": null}}], "created": 1754596262, "model": "o3-mini-2025-01-31", "object": "chat.completion", "service_tier": "default", "system_fingerprint": "fp_e20469f047", "usage": {"completion_tokens": 4498, "prompt_tokens": 28299, "total_tokens": 32797, "completion_tokens_details": {"accepted_prediction_tokens": 0, "audio_tokens": 0, "reasoning_tokens": 4224, "rejected_prediction_tokens": 0}, "prompt_tokens_details": {"audio_tokens": 0, "cached_tokens": 0}}}, "eval_result": {"score": 3.0, "valid_n": 1, "scroe_lst": [3], "rationale_lst": ["[{\"file_name\": \"model.py\", \"func_name\": \"DecoderLayer.forward\", \"severity_level\": \"high\", \"critique\": \"The implementation does not include a proper causal (subsequent) mask for decoder self-attention. Instead of preventing a token from attending to future tokens, only a padding mask is applied. This deviates from the paper's requirement for autoregressive decoding and can lead to leakage of future information.\"}, {\"file_name\": \"trainer.py\", \"func_name\": \"train\", \"severity_level\": \"high\", \"critique\": \"During training the target mask is derived solely from non-padding positions, without incorporating the necessary triangular mask to block future positions. This missing step undermines the autoregressive property required by the Transformer model.\"}, {\"file_name\": \"evaluation.py\", \"func_name\": \"_decode\", \"severity_level\": \"low\", \"critique\": \"The decoding function simply converts token IDs to strings rather than using the tokenizer's proper decode method, which may lead to mismatches in output formatting but does not directly affect the core model implementation.\"}]"]}}